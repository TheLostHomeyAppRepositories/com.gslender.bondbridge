{
  "openapi": "3.0.2",
  "info": {
    "title": "Bond Local API",
    "version": "v3.0.0",
    "x-logo": {
      "url": "https://s3.amazonaws.com/docs-cloud.appbond.com/bond.png"
    },
    "description": "# Introduction\n\n## Scope\n\nThe Bond V2 API allows control of Ceiling Fans, Fireplaces,\nand other Bond devices. It is intended for integration with offline control\nsystems, for use by advanced users, hobbiests, integrators, and installers.\n\nFor the purposes of device control,\nit does not matter whether these devices are\nremote-controlled devices that Work with Bond (connected via a Bond Bridge)\nor smart devices that are Smart by Bond.\n\nThis documentation describes the Local HTTP API for Bond products running v2 firmware.\nThis API does not require an internet connection, but does require that the API client\nbe able to directly communicate with the Bond over HTTP. Typically this means being\non the same Wi-Fi network. We are still working on a Cloud API, which will be very similar to the Local API.\n\n## Contributing\n\nWe welcome your corrections and improvements to this documentation!\nYou can find the source code for the documentation at the link below.\nFeel free to open a PR.\n\nhttps://github.com/bondhome/api-v2\n\n## Security\n\nThe Bond Local API uses unencrypted HTTP\nusing a simple token-based authentication mechanism.\n\n### Why HTTP and not HTTPS?\n\nAfter speaking with many users interested in Local API,\nwe discovered that users were satisfied with the protection provided\nby their Wi-Fi network's password, and that it is more important to\nprovide easy and low-latency control of Bond devices than to provide\nsecurity against other devices and users on the Wi-Fi network.\n\nFurthermore, it can be challenging for an API client to use HTTPS securely.\nIn order to protect against malicious devices or users inside your Wi-Fi network,\nit would be necessary for an HTTPS API client to check the validity of the\nBond's HTTPS certificate against an Olibra Certificate Authority.\nThe web standard of using domain-based certificate chain-of-trust\ndoes not work when offline, because the Bond does not have a domain name,\nbeing a device on your local network rather than on the public internet.\nAs a consequence, an HTTPS API would not work from many webbrowsers due to\nthe certificate being untrusted.\n\nThat said, if you have untrusted users or devices on your Wi-Fi network,\nwe recommend placing Bond on a seperate home automation network\nto which the untrusted users do not have the password.\n\n### Security on the Internet\n\nRest assured that when Bond products communicate with Bond Cloud\n(which is needed for integration and voice control support),\nwe use industry-standard secure TLS connections,\nsecured with per-unit public key cryptography. There is no unencrypted\ncommunication between Bond hardware and Bond Cloud.\n\nPlease be sure to always use Bond behind a firewall,\nand do not set up port-forwarding to the Bond Local API,\nto ensure that unsecured communications do not take place over the public internet.\n\n## Firmware Versions\n\nTo get the optimal match between this documentation and your Bond's exposed API,\nwe recommend you update your Bond to the most recent firmware available. In situations\nwhere part of this API is only available on Beta firmware, we will try to make this\nclear. To use such a feature, you'll need to upgrade your firmware with a Beta app.\nYou can sign up to receive Beta apps through one of the links in\n[this post](https://forum.bondhome.io/t/bond-local-api-public-beta-link/589), and we will\ntypically post about Beta features in the\n[Beta category of the forums](https://forum.bondhome.io/c/beta/5)\n\n# Getting Started\n\n## Finding the Bond IP\n\nFirst, power on a Bond device and connect it to your Wi-Fi network.\nUse the Bond app to confirm that the Bond's firmware is at least version v2.\n\nThe newest versions of the Bond Home app (starting in v2.15) have the Bond's IP address\nin the Bond's \"Network Info\" screen.  Tapping it will copy it to your clipboard.\nIf `ping` is more convenient for you,\nplease refer to the instructions below.\n\nFrom your PC connected to the same network, try pinging the Bond.\nFor example, if your Bond ID is ZZBL12345, you can ping it by running\nthe following command in a terminal:\n\n    ping BB18038.local\n\nYou should see the IP address printed, along with reply messages.\nPress Ctrl-C to exit the ping program:\n\n    PING bb18038.local (192.100.0.61): 56 data bytes\n    64 bytes from 192.100.0.61: icmp_seq=0 ttl=64 time=96.800 ms\n    64 bytes from 192.100.0.61: icmp_seq=1 ttl=64 time=34.902 ms\n    64 bytes from 192.100.0.61: icmp_seq=2 ttl=64 time=4.226 ms\n    ^C\n    --- bb18038.local ping statistics ---\n    3 packets transmitted, 3 packets received, 0.0% packet loss\n    round-trip min/avg/max/stddev = 4.226/45.309/96.800/38.503 ms\n\nYou can see the IP address of this Bond is `192.100.0.61`.\n\nNote that the lookup from Bond ID to IP address is performed using mDNS.\nYou will need to make sure that mDNS is installed and enabled on\nyour system (this is the default for most Linux distros and on MacOS).\n\nYou can search for all Bonds on your local network.\nOn Linux, do:\n\n    avahi-browse -a | grep bond\n\nAnd on MacOS, do:\n\n    dns-sd -B _bond._tcp .\n\nIn both cases, you will see a list of Bonds on your Wi-Fi network\nand their IP addresses.\n\n[Added in v2.18.2]\nIf you want to check for firmware version and discoverability of the Bond\nwithout connecting to it, you may look into the text properties of the\n_bond._tcp mDNS service:\n\n    dns-sd -Z _bond._tcp .\n\nYou should see a line like this in the reply:\n\n  ZPEA77090._bond._tcp TXT \"v=v2.18.0-2-gf4ddfba8-dirty-merck-discoverability\" \"d=0\"\n\n## Check Bond Version\n\nNext, let's check the Bond's firmware version.\nTo do this, we will use a command-line utility called cURL.\ncURL is installed by default on MacOS and most Linux distributions.\n\nTo check the firmware version, run this command:\n\n    curl -i http://192.100.0.61/v2/sys/version\n\nThe flag `-i` means \"display header information\".\nYou should see output similar to this:\n\n    HTTP/1.1 200 OK\n    Content-Length: 243\n    Content-Type: application/json; charset=utf-8\n\n    {\"target\":\"snowbird\",\"fw_ver\":\"v2.5.2\",\"fw_date\":\"Fri Feb 22 14:13:25 -03 2019\",\"make\":\"Olibra LLC\",\"model\":\"model\",\"branding_profile\":\"O_SNOWBIRD\",\"uptime_s\":380,\"_\":\"c342ae74\"}\n\nWhere, we see the firmware version is `v2.5.2`.\n\n## Getting the Bond Token\n\nNote that no token is required for the version endpoint,\nbut other endpoints will require token-based authentication.\n\nThe Bond Home app has the Bond's token in the Bond's \"Settings\" screen. Tapping it will copy it to your clipboard.\nIf `curl` is more convenient for you, please refer to the instructions below.\n\nTo get the token, follow this procedure:\n\n  Power cycle the Bond, and then within 10 minutes, access the `token` endpoint as follows:\n\n      curl -i http://192.100.0.61/v2/token\n\n  You should see a return body containing `token` such as this:\n\n    {locked\":0,\"pin_attempts_left\":10,\"token\":\"f074b61f628018fd\",\"nonce\":\"0000000000000000\",\"v1_nonce\":\"0000000000000000\",\"account_code\":\"\",\"v1_email\":\"\",\"_\":\"c9bb9590\"}\n\n  Copy the token and use it with a `BOND-Token` header in subsequent requests.\n\n  Alternatively, the token may be provided by setting the `_token` field within the request body. [Since v2.6.23]\n\n## Get Device Information\n\nTo get a list of devices on the Bond, do:\n\n    curl -H \"BOND-Token: f074b61f628018fd\" -i http://192.100.0.61/v2/devices\n\nOr, to use the embedded token technique:\n\n    curl -i http://192.100.0.61/v2/devices -X GET -d \"{\\\"_token\\\": \\\"f074b61f628018fd\\\"}\"\n\nYou will get a list of devices such as this:\n\n    {\"_\":\"f7e407f1\",\"79135791\":{\"_\":\"599b0fc5\"}}\n\nHere we see there is one device with id `79135791`.\n\nWe can request the device details by doing:\n\n    curl -H \"BOND-Token: f074b61f628018fd\" -i http://192.100.0.61/v2/devices/79135791\n\nAnd we can see the device name, location, and available Actions:\n\n    {\"name\":\"Magic Fan\",\"type\":\"CF\",\"actions\":[\"TurnOn\",\"TurnOff\",\"SetSpeed\",\"IncreaseSpeed\",\"DecreaseSpeed\"],\"location\":\"Dungeon\",\"_\":\"599b0fc5\",\"commands\":{\"_\":\"be8e1896\"}}\n\n## Set the Fan Speed\n\nFinally, let's try setting the fan's speed:\n\n    curl -H \"BOND-Token: f074b61f628018fd\" -i http://192.100.0.61/v2/devices/79135791/actions/SetSpeed -X PUT -d \"{\\\"argument\\\": 3}\"\n\n# API Concepts\n\n## 64-bit Keys\n\nAs of v3.0.0 firmware, Bond products have moved to 64-bit keys as resource\nidentifiers, instead of the previous 32-bit keys. So, rather than a device\nbeing identified by an 8-digit hex string, the ids for newly created devices\nwill be 16-digit hex strings.\n\nIn an effort to minimize distruption to API clients,\nalready created resources (devices, commands, skeds, etc.) will continue\nto be represented using the same exact string on the API. Additional\nleading zeros will not be added. So, for example, a device with id `01abcdef`\nwill continue to enumerate as `01abcdef` in v2.22. The Bond API is however\nlibral in what it accepts, removing leading zeros.\nSo any of the following received ids will be\nunderstood to point to this device: `1abcdef`, `01abcdef`, `0000000001abcdef`.\n\nInternally, the Bond API uses this rule:\n\n  If the upper 32-bits of an ID are zero, then send as 8 hex digits (32-bit).\n  Otherwise, send as 16 hex digits (64-bit).\n\n## Hash Tree\n\nThe Bond API is organized as a tree of endpoints,\nstarting at the root. Here's an incomplete example:\n\n    - v2\n      - devices\n        - 00000001\n          - commands\n          - state\n        - 00000002\n          - commands\n          - state\n        - 00000003\n          - commands\n          - state\n      - sys\n        - network\n\nClearly, if the entire tree were expanded on a request of the root,\nthen the resulting request may be very large! This large response body\nwould cause several problems, including taking a long time to transmit over\nslow networks, taking time to generate, and being too large to be effectively\ntransmitted over the message-based protocol MQTT.\n\nTherefore, Bond only returns a single level of the tree on every request.\n\nEach node of the tree has a 32-bit \"hash\" value which is changed\nwhenever that node, or any of the child nodes, are modified.\nThis hash is provided in every reply body as the \"_\" object.\n\nWhen a requested endpoint has children that are not expanded,\nthe child values are replaced with just the child hashes.\n\nFor example, when requesting the `devices` endpoint,\nyou may receive the following response:\n\n    {\"_\":\"f7e407f1\",\"79135791\":{\"_\":\"599b0fc5\"}}\n\nLet's break this down:\n\n  - `\"_\":\"f7e407f1\"` : This is the hash value of the devices object.\n     If any devices are added, modified, or deleted, this hash will change.\n\n  - `\"79135791\"` : This is the device id of the one device on this Bond.\n\n  - `{\"_\":\"599b0fc5\"}` : This is the hash object representing device with id `79135791`.\n\nIf the API client wants to get the name of the device, it is necessary to make\na seperate request on the device itself: `GET devices/79135791`,\nwhich would return the name and location directly associated with the device,\nas well as hash objects for the child nodes of device: `commands` and `state`.\n\n## Local Hash vs Subtree Hash\n\nThe `_` hashes discussed above are designed to allow a client to quickly\ndiscover changes to a Bond's state. As we've shown, this requires the hash\nat a particular endpoint to incorporate not only that endpoint's state but\nalso the state of all the children. However, it is sometimes desireable\nto have a hash of just the data local to that endpoint, that is, data\nnot contained within a child.\n\n[As of v3 firmware] we introduce a new `__` (double underscore) field\ncalled a \"local hash\". This is intended to be used by the Bond Cloud\nand Bond Apps specifically for downwards synchronization as required\nfor the Groups and Scenes features.\n\nMost integrators can safely ignore the local hashes.\n\n## Request ID\n\nThe purpose of the Request ID is to allow a client to retry a non-idempotent\nrequest (PUT, POST, PATCH, or DELETE) without risk of Bond taking the same\naction twice.\n\nIf you need to implement a retry mechanism in your integration,\nplease contact the Bond Engineering Team via the Bond Forums https://forum.bondhome.io/\n\n## Request Flags\n\nEach request may contain a number of request flags,\nwhich can be specified on HTTP via the `Bond-Flags` header\n(or via the `f` field for BPUP and MQTT transports).\nThese flags are not needed in most integrations,\nbut are used by Bond Home app and some partner integrations\nto facilitate debugging at scale.\n\nFlags are:\n\n  - bit 0: (reserved)\n  - bit 1: DOWNSYNC: request is part of downward synchronization\n  - bit 2: UP: request is moving away from Bond\n  - bit 3: DUP: request is retransmitted or cached reply\n  - bit 4: UCAST: (internal use)\n  - bit 5: QUIET: (internal use)\n  - bit 6: BCAST: (internal use)\n  - bit 7: PASSTHRU: (internal use)\n\n## Modified Times\n\nCertain endpoints may track their last modified time in a special\n`__modified` field. The modified time is an integer representing\nthe time in seconds since the Unix epoch when the endpoint was last modified.\n\nCurrently the endpoints exposing `__modified` are:\n\n    groups/{}\n    groups/{}/skeds\n    groups/{}/skeds/{}\n    scenes/{}\n    scenes/{}/skeds\n    scenes/{}/skeds/{}\n\nThe modified times are set using the request time as specified in the\n`BOND-Unixtime` HTTP header (or `u` flag on BPUP and MQTT).\nExample:\n\n    BOND-Unixtime: 1643114517\n\n    { ..., \"u\":\"1643114517\", ... }\n\nClients who may modify any shard endpoints should specify this header\non all reqeusts. If this \"unixtime\" field is not provided, the Bond\nwill use its internal real-time clock, if already set.\n\nConversely, if the Bond's internal clock is not yet set, it will use\nthe timestamp specified in this field as the internal time.\nFor this reason, only use the `BOND-Unixtime` header on systems with\naccurate clocks, such as smart phones. Incorrectly set times may result\nin shard synchronization issues and skeds running unexpectedly.\n\n# Groups and Scenes\n\nBond Home V3 introduces Groups and Scenes as major new features.\nIn designing these features, we needed to meet several requirements\nrequested by the Bond community:\n\n  1. Groups and Scenes **must work offline**. A loss of internet connection\n     must not interfere with control and feedback, and should not\n     prevent creation and management, when the Bond Home app is on the same\n     local network as the devices in question.\n  2. Smart by Bond devices can be grouped or added to a Scene with **no\n     Bond Bridge required as a hub**.\n  3. Groups and Scenes must be **resiliant to any individual Bond units\n     going offline**. That is, there must not be a central controller\n     as a single point of failure. If only a subset of the Group or Scene\n     devices are online, then they should still execute action requests.\n  4. **Intuitive UI** in the Bond Home app for creating, managing,\n     and controling Groups and Scenes. The user should be blissfully unaware\n     of any lower-level complexities.\n\nIn order to achieve the above, we chose a design where a Group or\nScene object is distributed among the participating Bond units.\nThe Group or Scene endpoint data that lives on a single Bond\nis called a _shard_. Each Bond unit acts as if it were the only\nparticipant in the Group or Scene, using only the data in its own shard,\nwith no communication among Bond units.\n\nThe API client is responsible for managing the various shards.\nThe most difficult aspects of this---involving correction of inconsistent\ndata between Bonds---is handled by the Bond Home apps. However, some\ncomplexity does remain for integrators who need to send multiple requests\nto control a Group and must merge the data returned by those requests\nto present a sensible interface to the control system and ultimately the user.\n\nWe will here discuss:\n\n - discovery, control, and feedback (for all API clients)\n - management (for Bond Home app)\n\nThe following discussion is in terms of Groups but should be understood\nas also applying to Scenes unless otherwise specified.\n\n## Discovery\n\nTo discover the Groups available on a Bond network,\nthe client should first query the `groups/` enumeration\nto get the group IDs in which each Bond participates.\nThe union of the Group IDs gives the list of Groups on the network.\n\nFor example:\n\n    ZZBL12345:groups = {\n      \"0000000000000001\":{...},\n      \"0000000000000002\":{...},\n      \"0000000000000003\":{...}\n    }\n\n    KSMJWCE12345:groups = {\n      \"0000000000000002\":{...},\n      \"0000000000000004\":{...}\n    }\n\nThere are a total of 4 groups on the network:\n\n    \"0000000000000001\"\n    \"0000000000000002\"\n    \"0000000000000003\"\n    \"0000000000000004\"\n\nIn this example, the Bond Bridge (ZZ...) participates in three groups with IDs 1, 2, and 3,\nwhile a Smart by Bond fan (K...) participates in groups 2 and 4.\n\nNext, the client should query each of the group shard endpoints `group/{}`.\nThe list of devices participating in the group is the union of the devices\nin the group shards.\n\nFor example, if the result of querying the `groups/{}` endpoint for the\ngroup with ID 2 is:\n\n    ZZBL12345:groups/0000000000000002 = {\n      \"__modified\": 1642788966,\n      \"name\": \"Great Room Fans\",\n      \"types\": [\"CF\"],\n      \"locations\": [\"Great Room\"],\n      \"devices\": [\"aabbccdd\", \"11223344\"],\n      \"actions\": [\"TurnOn\", \"TurnOff\"]\n    }\n\n    KSMJWCE12345:groups/0000000000000002 = {\n      \"__modified\": 1642788968,\n      \"name\": \"Great Room Fans\",\n      \"types\": [\"CF\"],\n      \"locations\": [\"Great Room\"],\n      \"devices\": [\"1\"]\n      \"actions\": [\"TurnOn\", \"TurnOff\", \"TurnLightOn\", \"TurnLightOff\"]\n    }\n\nThen the API client concludes that the group named \"Great Room Fans\"\ncontains three devices:\n\n    ZZBL12345:aabbccdd\n    ZZBL12345:11223344\n    KSMJWCE12345:1\n\nIn the case of a disagreement of the `name` between shards, the client\nshould use the name from the group shard with the most recent\nmodified time (`__modified`). If there is a tie for modified time,\nthe client may choose arbitrarily among the shards.\n\nThe type of the group is indicated by the `types` array,\nwhich is typically only of length one. In this case we see it is `CF`\nfor Ceiling Fan.\n\n## Control\n\n### Determining Available Actions\n\nThe actions available on a group is the intersection of the actions\navailable on the group shards. So, using the example from the previous\nsection, although the group shard on the Smart by Bond fan\n(serial number K...) supports `TurnLightOn` and `TurnLightOff` actions,\nthe shard on the Bond Bridge does not. So the intersection of the `actions`\narrays is just:\n\n    [\"TurnOn\", \"TurnOff\"]\n\n### Executing a Group Action\n\nTo execute an action on the group, the client should send PUT requests\nto the actions on each group shard. So, to turn on the Great Room Fans\ngroup, the client would send two requests using the same Group ID:\n\n    PUT http://ZZBL12345/v2/groups/0000000000000001/actions/TurnOn\n    PUT http://KSMJWCE12345/v2/groups/0000000000000001/actions/TurnOn\n\nPreferably these requests should be run concurrently so that the time\nrequired to process the first request does not delay the execution of\nthe action on the second shard.\n\n### Success, Error, and Timeout\n\nIf all requests complete successfully, then the group action can be considered\na success. If any errors or timeouts occur, then an error should be reported\nto the user.\n\n## State Feedback\n\nWhenever a group changes state, a state update is sent for the group shards\nand all member devices. Whenever a device state changes, a state update is\nsent for that devices plus an update for the state of any groups which contain\nthat device.\n\nGroup shards report state under `groups/{}/state`. The schema of this endpoint\nis similar to that of `devices/{}/state`, except that state variables on a\ngroup can take the value `null` when the member devices disagree,\nas discussed below in the documentation for this endpoint.\nAlthough the Bond Bridge will combine the states of the member devices\ninto a single state for the group shard, it is the responsibility of the\nAPI client to merge the states of each group shard to obtain an overall\nstate for the group.\n\nFor example, suppose the client receives the following state updates:\n\n    ZZBL12345:groups/0000000000000001/state = {\n      \"power\": 1,\n    }\n\n    KSMJWCE12345:groups/0000000000000001/state = {\n      \"power\": 1,\n      \"light\": 0\n    }\n\nThe client would intersect the state keys to remove any state variables\nnot shared by all shards, and then set the values to either `null` if\nthere is disagreement between shards, or to the common value. In this\ncase the client would conclude the group state to be:\n\n    {\"power\": 1}\n\nIf now one of the member devices, say the Smart by Bond fan, is turned off,\nthen the client would receive a state update for the device and group:\n\n    KSMJWCE12345:devices/1/state = {\n      \"power\": 0,\n      \"light\": 0\n    }\n\n    KSMJWCE12345:groups/0000000000000001/state = {\n      \"power\": 0,\n      \"light\": 0\n    }\n\nThe client would now combine the two group shard states to conclude:\n\n    {\"power\": null}\n\nThat is, that the power state of the group is indeterminate. On a UI\nwith seperate ON/OFF buttons, this would usually be represented by\nhighlighting neither button.\n\n## Management\n\n### Group Creation\n\nTo create a new group, the client should send requests to each of the\nparticipating Bonds with the list of devices to include. Crucially,\nall shards must have the same group ID so that they will be understood\nas a single group by other clients. The preferred way to accomplish this\nis to allow the Bond to generate a random ID for the first shard,\nand then to specify that ID in the `_post_id` field during the subsequent\nPOST requests to the other Bonds.\n\nFor example, suppose we want to add 3 Smart by Bond lights to a group\ncalled \"Kitchen Lights\". The requests and responses might go like this:\n\n    > POST http://TWCTBXX00001/v2/groups {\"name\": \"Kitchen Lights\", \"devices\": [1]}\n    < 201 OK {\"_post_id\": \"0000000000000001\"}\n\n    > POST http://TWCTBXX00002/v2/groups {\"_post_id\": \"0000000000000001\", \"name\": \"Kitchen Lights\", \"devices\": [1]}\n    < 201 OK {\"_post_id\": \"0000000000000001\"}\n\n    > POST http://TWCTBXX00003/v2/groups {\"_post_id\": \"0000000000000001\", \"name\": \"Kitchen Lights\", \"devices\": [1]}\n    < 201 OK {\"_post_id\": \"0000000000000001\"}\n\nThe last two requests could be parallelized.\n\nAlternatively the client could pre-generate the ID and parallelize all three\nrequests. However, the client MUST be sure to use a good random number\ngenerator and generate a 64-bit (16-nibble) hex string in lower-case\nwith leading zeros.\n\n### Group Deletion\n\nTo delete a group, the client should send a DELETE request to each\nof the shards. If one of the Bonds is offline, then the group will only\nbe partially deleted. The user must bring that Bond back online in order\nto finish deleting the group. In the meantime, the group will still exist\ncontaining just the devices on the offline Bond.\n\n### Removing Device from Group\n\nDevices may be removed from the Group via DELETE `groups/{}/devices/{}`.\nWhen the last device is removed from a group, the shard containing that\ndevice will disappear (an implicit deletion).\n\n### Changing Group Name\n\nTo change the name of a group, the client should send a PATCH request\nto each of the shards. The name can be changed as long as there is at least\none online Bond participating in the group. If any Bonds are offline,\ntheir `group/{}` endpoints will still have the old name. However, this\ndoes not pose a problem for API clients because the `name` should be taken\nfrom the group shard with the most recent `__modified` field.\n\nThe Bond Home app performs a special downward synchronization whereby\nout-of-date group shard names are updated with the latest. That is,\nwhen Bonds previously offline come back online, they are PATCHed with the\nname of the most recent shard in the group. Other API clients do not\nneed to perform this downward sync function.\n\n## Skeds\n\nSchedules on groups and scenes need to be installed into each shard,\nand the Bond Home app performs downward synchronization on the skeds.\n\n### Sked Creation\n\nSimilar to group creation, Bond Home app creates the sked on each shard\n**using the same 64-bit ID** for that sked on each shard. The sked ID\nmust be different than the group ID. Example:\n\n    > POST http://TWCTBXX00001/v2/groups/0000000000000001/skeds {\"action\":\"SetBrightness\", \"argument\":75, \"mark\":\"sunrise\", \"seconds\":0}\n    < 201 OK {\"_post_id\": \"0000000000000007\"}\n\n    > POST http://TWCTBXX00002/v2/groups/0000000000000001/skeds {\"_post_id\": \"0000000000000007\", \"action\":\"SetBrightness\", \"argument\":75, \"mark\":\"sunrise\", \"seconds\":0}\n    < 201 OK {\"_post_id\": \"0000000000000007\"}\n\n    > POST http://TWCTBXX00003/v2/groups/0000000000000001/skeds {\"_post_id\": \"0000000000000007\", \"action\":\"SetBrightness\", \"argument\":75, \"mark\":\"sunrise\", \"seconds\":0}\n    < 201 OK {\"_post_id\": \"0000000000000007\"}\n\nThe last two requests could be parallelized.\n\n### Sked Modification\n\nSimilar to changing the name of a group, the client can modify the sked\nsettings by broadcasting a PATCH to the sked on each group shards.\n\nHere, in the event that a Bond is offline, the sked will continue being\nexecuted with the outdated parameters until the Bond Home app performs\ndownward synchronization to update that sked.\n\n### Sked Deletion\n\nDeleting a group or scene sked is as simple as sending DELETE to the sked\non each shard.\n\nIn the event of one or more Bonds being offline, they will continue to execute\nthe sked until the Bond Home app syncs with them and removes the sked\nwhich was supposed to be deleted. The Bond Home app knows that a sked\nwas deleted by checking the `__modified` timestamp on the group shard skeds\nenumeration `groups/{}/skeds`. If a sked is present on an older enumeration\nbut absent on a newer one, it will be removed from the old enumeration.\nSimilarly, if a sked is present on the *newer* enumeration but absent on the\nold one, then the Bond Home app will downwards-synchronize by POSTing the\nmissing sked.\n\n# Bond Push UDP Protocol (BPUP)\n\nCAVEAT: BPUP is currently in Beta status. Breaking changes may occur to this API as we collect community feedback.\n\nA common problem in writing drivers to support Bond devices is a need\nto update the client whenever device state changes. With the HTTP API,\nthis implies inefficient polling. So we've added support for \"Bond Push\",\na UDP-based API for low-latency control and feedback within the local network.\n\nA client initiates a connection by opening a UDP socket to the Bond on\nport 30007 and sending a Keep-Alive datagram, which is just a single\nnewline character. This subscribes the client to state updates from devices.\nEquivalent to the regex `devices/.*/state`.\n\nThe Bond will acknowledge the subscription by immediately replying with\nthe Bond ID:\n\n    {\"B\":\"ZZBL12345\"}\\n\n\nThe client should continue to send the Keep-Alive\ndatagram on the same socket every 60 seconds to keep the connection active.\nIf no Keep-Alive datagram is received after 125 seconds,\nBond will stop sending feedback to the client.\n\nA future update will allow subscribing to a different topic pattern.\n\nThe Bond will send to all active clients Update datagrams consisting of\na JSON object terminated by a newline character. Here's an example Update datagram:\n\n    {\"B\":\"ZZBL12345\",\"d\":0,\"v\":\"v2.18.2\",\"t\":\"devices/aabbccdd/state\",\"i\":\"00112233bbeeeeff\",\"s\":200,\"m\":0,\"f\":255,\"b\":{\"_\":\"ab9284ef\",\"power\":1,\"speed\":2}}\\n\n\nBreaking down the fields:\n\n  - `B`: the Bond ID\n  - `d`: discoverability (0=not discoverable, 1=setup mode, 2=sos mode) [new in v2.18.2]\n  - `v`: firmware version [new in v2.18.2]\n  - `t`: topic (the path from HTTP URL)\n  - `i`: request ID\n  - `s`: HTTP status code\n  - `m`: HTTP method (0=GET, 1=POST, 2=PUT, 3=DELETE, 4=PATCH)\n  - `f`: flags (Olibra-internal use)\n  - `x`: source transport (transport from which the request was received. Can be: \"http\", \"mqtt\", \"bond\" (gratuitous reply), \"cli\" (serial terminal), with other values reserved for future use) [Since v2.12.1]\n  - `b`: HTTP response body\n\nThere's also some client-specific error messages,\n\n    {\"B\":\"ZZBL12345\",\"err_id\":631,\"err_msg\":\"BPUP client timeout\"}\\n\n\nFor feature requests and concerns, please contact the Bond Engineering Team\nvia the Bond Forums https://forum.bondhome.io/\n\n# MQTT\n\nIMPORTANT NOTE: MQTT redirection is implemented, but is currently untested. It may\nnot work at all. If you have a use case for this API, please let us know on\n[the forums](https://forum.bondhome.io/) so that we can better prioritize implementing\nand testing this API.\n\nYou can configure your Bond to communicate with a custom MQTT broker through the `api/mqtt`\nendpoint.\n\nWhen the Bond connects to its configured MQTT broker, it subscribes to the topic\n`v2/<Bond ID>/down/#`, where `#` is a wildcard. It publishes messages to\n`v2/<Bond ID>/up/<subtopic>`, where the subtopic is that indicated in this documentation\nless the `v2/` prefix.\n\nA concrete example: requesting devices from the Bond.\n\nThe equivalent to HTTP GET `v2/devices` from a Bond with ID ZZBL12345 is publishing\na message to `v2/ZZBL12345/down/devices` with the payload `{\"m\": 0}` (since the default\nfor `\"m\"` (HTTP method) is 0 (`GET`), this payload could also just be `{}`)\n\nThe Bond, if it had a single device with id `12345678`, would then\npublish to `v2/ZZBL12345/up/devices` with the payload\n\n  `{\"B\": \"ZZBL12345\", \"d\": 2, \"v\": \"v2.18.2\", \"t\": \"devices\", \"m\": 0, \"i\": <randomly-generated request ID>,\n  \"s\": 200, \"f\": 255, \"b\" {\"_\": <devices hash>, \"12345678\": {\"_\": <12345678's hash>}}}`\n\nBreaking down the fields:\n\n  - `B`: the Bond ID\n  - `d`: discoverability (0=not discoverable, 1=setup mode, 2=sos mode) [new in v2.18.2]\n  - `v`: firmware version [new in v2.18.2]\n  - `t`: subtopic (the path from HTTP URL, without the `v2/` prefix)\n  - `i`: request ID\n  - `s`: HTTP status code\n  - `m`: HTTP method (0=GET, 1=POST, 2=PUT, 3=DELETE, 4=PATCH)\n  - `f`: flags (Olibra-internal use)\n  - `b`: HTTP response body\n\n(Note: the first two fields are redundant, they could be extracted from the MQTT topic)\n\nThe MQTT broker to which the Bond is connected is treated as trusted, so token\nauthentication is not necessary. Make sure you check the server certificate using\nthe appropriate fields in the `api/mqtt` endpoint to avoid man-in-the-middle attacks.\n\n# HomeKit\n\n[Added in v3.5.1]\nThe HomeKit integration is available on Bond Bridge Pro and support Shade devices.\nThe integration is disabled by default, but you can enable/disable it through\nthe Bond Home iOS app or the `api/bhk` endpoint.\n\n## Setup Code\n\nThe Setup Code is generated based on your Bond PIN (your Bond PIN two times).\nThe Bond PIN is located on the product label.\nThe Setup Code is also available on the Bond Home iOS app.\n\n### Setup Code example\n\nFor Bond PIN \"1234\", your HomeKit Setup Code is \"12341234\".\n\n## Bond Home iOS app\n\nAs of iOS app version v2.40.2, the HomeKit info is available in both the Bond Settings screen and the Manage Integrations screen.\n\nIn the Bond Settings screen, the HomeKit info is presented under the Advanced Settings section.\n\nIn the Manage Integrations screen you should see the HomeKit listed if at least one of your Bonds supports it.\nThe HomeKit cell shows how many Bonds have the HomeKit integration enabled (**not** available) at the moment.\nTapping on the cell will take you to the HomeKit List screen, showing the HomeKit info for every Bond that supports it.\n\nThe HomeKit info consists of a toggle switch to enable/disable the feature and shows its Setup Code.\n\n## Add a Bridge in the Home app\n\nOpen the Home app on your iPhone/iPad and follow these steps:\n\n* Tap on \"Add Accessory\"\n* Choose the \"I Don't Have a Code or Cannot Scan\" option\n* Tap on your Bond Bridge name in the list of Nearby Accessories\n* Select the \"Add Anyway\" option for the \"Uncertified Accessory\" prompt\n* Enter yours Bond Bridge Setup code and hit Continue\n* Set the Location and Name for your Bridge\n* Set the location and Name for your Bridge's devices, if any\n\n# Discoverability\n\nBonds may be discovered via either mDNS or BPUP.\nA Bond on the network will reply to queries regardless of its discoverability.\nHowever, clients (especially the Bond Home app) need to know if the device\nshould be shown in the list of devices available for setup, or whether it is\nfunctioning normally and should be ignored. (This is a usability rather than\na security consideration.)\n\nTo this end, we have added [in v2.18.2] a discoverability flag in the mDNS,\nBPUP, and even MQTT replies, with the following possible values:\n\n  - 0 = not discoverable: Bond is on an account and functioning normally.\n    Should not appear in any list of Bonds ready to set up.\n\n  - 1 = setup mode: Bond is not on an account. This is either a new unit,\n    or a unit that has had a GREEN or WHITE reset performed. The unit's\n    light ring will be either Solid Green (ready on Ethernet)\n    or Flashing Green (ready on Wi-Fi).\n\n  - 2 = SOS mode: the Bond is on an account, however there is either a cloud\n    connection problem, or for Smart by Bond devices where the user has held\n    down the Power button to re-enable discoverability.\n    In this case, the light ring (if present) will indicate an error,\n    and the Config AP will be opened.\n    SOS mode is automatically exited if the cloud connection is restored.\n\n# Glossary\n\n## Bond Bridge\n\nThe Bond Bridge, also referred to simply as \"Bond\",\nconnects RF- and IR-controlled devices to Wi-Fi.\nLearn more at https://bondhome.io/product/.\n\n## Smart by Bond\n\nA \"Smart by Bond\" appliance is a smart appliance that\nuses the API described here, other than those parts\ndesignated as \"Bridge Only\".\n\n## Device\n\nWithin the Bond ecosystem, the term \"device\" always refers to\na home appliance connected to Bond. A Bond Bridge is not itself a device.\n\n## Feature\n\nBond devices support one or more \"features\", such as Speed or Brightness,\nwhich come with a set of Actions, State Variables, and Properties\nthat define and control some aspect of the device.\n\nFor example, a device which supports the Light feature will always\nhave actions for TurnLightOn, TurnLightOff, and ToggleLight.\nFurthermore, it will always have the `light` state variable.\n\nSee the Features section below for detail on all supported features.\n\n## Action\n\nDevices are controlled by calling \"actions\" such as SetSpeed or TurnOff.\n\nSome actions require an \"argument\" to be included. For example,\nSetSpeed requires an integer argument with the speed number to set.\n\nActions represent a user's intent, but do not nessisarly map one-to-one\nonto the commands that are sent to a device.\nActions abstract away the complexity of the underlying commands needed\nto achieve the desired change in state of a device.\n\n## Commands\n\nBond Bridges operate by translating actions into \"commands\".\nWhile actions are in a user's language, commands are in the device's remote control's\nlanguage. Often there is a one-to-one mapping from actions to commands,\nfor example, most ceiling fans have distinct RF commands for each speed.\nSo the action \"SetSpeed(3)\" is always translated into the same RF signal\nthat tells the device to go to the third speed.\n\nHowever, sometimes a device does not have a single command which always\naccomplishes a specific action. For example, most ceiling fans do not have\na specific command corresponding to the TurnOn action, but rather, Bond\nremembers the previous speed that the fan was set to, and uses a particular\nSetSpeed command to accompish the TurnOn action. On the other hand,\ncertain ceiling fans do have a specific TurnOn command. In that case the\nTurnOn action will always map to the TurnOn command. This results in the\ncorrect speed being restored even if the factory remote control was used.\n\n## Signal\n\nThe term \"signal\" refers to the actual RF or IR transmission sent to the\nremote-controlled device to accomplish a particular command.\n\nEvery command should have exactly one corresponding signal. However,\nthe Bond Bridge supports a number of `signal` endpoints which allow\nmanipulation of signals directly, such as `signal/scan` to receive signals,\nor `signal/tx` to transmit a signal without association to a device.\n\n## State Variable\n\nThe Bond Bridge makes an effort to track the state of devices,\nand this state is represented by a set of \"state variables\",\nsuch as speed and brightness.\n\nSpeed variables cannot be set directly, but rather are manipulated\nindirectly through actions. For example, the SetSpeed action with an\nargument of 3 has the side-effect of setting the speed state variable\nto 3 and the power variable to 1.\n\n## Properties\n\nSome device Features have a \"Property\" which parameterizes the devices\ncapabilities. For example, multi-speed ceiling fans supporting the Speed\nfeature will always have a `max_speed` property which gives the maximum\nspeed which the `speed` state variable may take.\n\nSome properties are read-only, others are PATCH-able.\n\n### Feature Toggles\n\nProperties starting with `feature_` are called _feature toggles_,\nand always default to true.  When a feature toggle is set to false,\nthe corresponding feature is disabled along with all dependent features,\nleaving only the top-level feature toggle.\n\nFor example, on a device with Light, UpDownLight, Brightness,\nand UpDownLightBrightness features, setting `feature_light` to false\nwill cause all properties, state variables, and actions\nfor all four of these features to be removed from the API,\nincluding the feature toggles `feature_brightness` and `feature_up_down_light`.\nOnly `feature_light` will remain.\n\nThe intended use of feature toggles is in the Bond Home application's\ndevice settings screen, wherein the currently visible feature toggles\nshould correspond exactly to toggle switches. Furthermore, the client\nneed not have any feature-specific code for this: the order\nof feature toggles in the properties JSON object may be used as the\nUI display order, and the display names may be programmatically derived\nfrom the property names, e.g. `feature_up_down_light` displayed as\n\"Up Down Light\".\n\nFeature toggles are only available for some features,\nand are currently only available for Smart by Bond devices.\n\n# Features\n\nDevices have a combination of actions, state variables, and fixed properties.\nIn order to understand how these relate to each other,\nit is helpful to organize actions into features and study one feature at a time.\n\n## Power\n\nThe Power feature controls the basic on/off state of a device.\n\nFor Ceiling Fans, it refers to the state of the fan motor.\nNote that most ceiling fans have lights which are not governed\nby the Power feature.\n\nFor Fireplaces, it refers to the state of the flame.\nNote that many fireplaces have separate light or fan functions,\n which are not governed by the Power feature.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **power**: (integer) 1 = on, 0 = off\n\n### Actions\n\n- **TurnOn()**: Turn device power on.\n- **TurnOff()**: Turn device power off.\n- **TogglePower()**: Change device power from on to off, or off to on.\n\n## Timer\n\nThe Timer feature allows turning off a device after a specified delay,\nsimilar to the dial timer interface on toaster ovens.\n\nThe Timer feature requires the Power feature.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **timer**: (integer) seconds remaining on timer, or 0 meaning no timer running\n\n### Actions\n\n- **SetTimer(s)**: Start timer for `s` seconds. If power if off, device is\n  implicitly turned on.\n  If argument is zero, the timer is canceled without turning off the device.\n\nNOTE: The timer is canceled implicitly by any action on the Power, Speed,\n  or Breeze features, other than TurnOn. For example, if a timer is running,\n  and the user turns off the device and then turns it back on, the timer\n  will be canceled and therefore the device will not turn off again\n  unexpectedly. The intention that a timer is designed to help reduce\n  energy consumption, but should never surprise the user who forgot that\n  they enabled the timer function earlier.  When the timer reaches zero\n  it runs TurnOff, so it will turn off the device whether it is set at a\n  specific speed or it is set to breeze.\n\n## Speed\n\nThe Speed feature is used by multiple-speed Ceiling Fans to track the motor speed.\n\nThe Speed feature requires the Power feature.\n\nNote that while many Fireplaces have a built-in fan,\n they do not use the Speed feature. See *FpFan* feature.\n\n### Properties\n\n - **max_speed**: (integer, read-only) highest speed available\n\n### State Variables\n\n - **speed**: (integer) value from 1 to max_speed. If power=0, speed represents the last speed setting and the speed to which the device resumes when user asks to turn on.\n\n### Actions\n\n- **SetSpeed(speed)**: Set speed and turn on. If speed>max_speed, max_speed is assumed. If the fan is off, implicitly turn on the power. Setting speed to zero or a negative value is ignored.\n- **IncreaseSpeed(speeds)**: Increase speed of fan by specified number of *speeds*. If the fan is off, implicitly turn on the power.\n- **DecreaseSpeed(speeds)**: Decrease fan speed by specified number of *speeds*. If attempting to decrease fan speed below `1`, the fan will remain at speed 1. That is, power will not be implicitly turned off. If the power is already off, DecreaseSpeed is ignored.\n\nNOTE: When the device is turned off, the previous speed is remembered. When the fan is then turned back on, it will resume at the previous speed.\n\n## Breeze\n\nThe Breeze feature of many multi-speed Ceiling Fans provides a randomized breeze.\n\nBreeze works by pseudorandomly changing the power and speed of the fan over time to create a natural breeze effect.\nThere are two parameters of the breeze which may be adjusted to provide\nthe desired breeze effect.\n\nThe Breeze feature requires the Speed feature.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **breeze**: (array) array of the form `[ <mode>, <mean>, <var> ]`:\n   - **mode**: (integer) 0 = breeze mode disabled, 1 = breeze mode enabled\n   - **mean**: (integer) sets the average speed. 0 = minimum average speed (calm), 100 = maximum average speed (storm)\n   - **var**: (integer) sets the variability of the speed. 0 = minimum variation (steady), 100 = maximum variation (gusty)\n\n### Actions\n\n- **BreezeOn()**: Enable breeze with remembered parameters. Defaults to [50,50].\n- **BreezeOff()**: Stop breeze. Fan remains on at current speed.\n- **SetBreeze(breeze)**: Enable breeze with specified parameters (same as breeze state variable).\n  Example `SetBreeze([1, 20, 90])`.\n\nNOTE: If breeze is enabled when the fan is powered off, then breeze will be restored at power on.\n\nNOTE: Calling SetBreeze with first parameter equal to 0 will disable breeze,\n  but still set the specified mean and var parameters.\n\nNOTE: SetSpeed implicitly disables breeze mode.\n\n## Direction\n\nThe Direction feature is used by reversible Ceiling Fans to track the direction of the fan motor.\n\nThe Direction feature requires the Power feature.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **direction**: (integer) 1 = forward, -1 = reverse.\n\nThe forward and reverse modes are sometimes called Summer and Winter, respectively.\n\n### Actions\n\n- **SetDirection(direction)**: Control forward and reverse.\n- **ToggleDirection()**: Reverse the direction of the fan.\n\n## Light\n\nThe Light feature governs the basic on/off status of a device's main light.\n\nThis is a very common feature of Ceiling Fans, and present on many Fireplaces.\n\nSee the UpDownLight feature for the behavior of devices with dual lights.\n\n\n### Properties\n\n - **feature_light**: (boolean, PATCH-able) true = Light feature enabled (default), false = Light feature disabled\n\n### State Variables\n\n - **light**: (integer) 1 = light on, 0 = light off\n\n### Actions\n\n- **TurnLightOn()**: Turn light on.\n- **TurnLightOff()**: Turn off light.\n- **ToggleLight()**: Change light from on to off, or off to on.\n\n## UpDownLight\n\nThe UpDownLight feature governs the on/off status of a device's upwards-\nand downards-facing lights,\nsuch as the ceiling-wash \"up light\" and direct \"down light\"\nfound on some high-end ceiling fans.\n\nThe corresponding physical remote often has seperate buttons for the UpLight\nand DownLight, but no button for just \"Light\". However, Bond always makes the\nLight feature available along with UpDownLight to make these devices easy to integrate.\nFor example, saying \"Alexa, Turn on the Light\" corresponds to the TurnLightOn\naction, which will have a reasonable result for devices with UpDownLight.\n\nUpDownLight depends on Light feature.\n\n### Properties\n\n - **feature_up_down_light**: (boolean, PATCH-able) true = Up Down Light feature enabled (default), false = Up Down Light feature disabled, both physical light circuits will operate as one Light.\n\n### State Variables\n\n - **up_light**: (integer) 1 = up light enabled, 0 = up light disabled\n - **down_light**: (integer) 1 = down light enabled, 0 = down light disabled\n\n If both up_light and light are 1, then the up light will be on,\n and similar for down light.\n\n Note that both up_light and down_light may not be simultaneously zero,\n so that the device is always ready to respond to a TurnLightOn request.\n\n### Actions\n\n- **TurnUpLightOn()**: Turn up light on.\n- **TurnDownLightOn()**: Turn down light on.\n- **TurnUpLightOff()**: Turn off up light.\n- **TurnDownLightOff()**: Turn off down light.\n- **ToggleUpLight()**: Change up light from on to off, or off to on.\n- **ToggleDownLight()**: Change down light from on to off, or off to on.\n\nNote that TurnLightOff/TurnLightOn honor the up_light and down_light\nenable variables. That is, the user is able to use the factory remote\nto select a prefered combination of up and down light, and that combination\nis restored when TurnLightOn is called, perhaps through a voice integration.\n\n## Brightness\n\nThe Brightness feature governs lights which can be dimmed to specified brightness level.\n\nThis feature is common on classic Ceiling Fans whose remotes have displays.\nNote, however, that classic Ceiling Fans whose remotes do *not* have displays typically only support HoldToDim or HoldToDimUpDown feature.\n\n### Properties\n\n - **feature_brightness**: (boolean, PATCH-able) true = Brightness feature enabled (default), false = Brightness feature disabled. When PATCH-ing to false, brightness is set to 100 prior to disabling the feature.\n\n### State Variables\n\n - **brightness**: (integer) percentage value of brightness, 1-100. If light=0, brightness represents the last brightness setting and the brightness to resume when user turns on light. If fan has no dimmer or a non-stateful dimmer, brightness is always 100.\n\n### Actions\n\n- **SetBrightness(brightness)**: Set the brightness of the light to specified percentage. Value of 0 is ignored, use TurnLightOff instead.\n- **IncreaseBrightness(amount)**: Increase brightness of light by specified percentage. If light is off, it will be turned on at (0 + amount).\n- **DecreaseBrightness(amount)**: Decrease light brightness by specified percentage. If attempting to decrease brightness below 1%, light will remain at 1%. Use TurnLightOff to turn off the light. If the light is off, the light will remain off but the remembered brightness will be decreased.\n- **CycleBrightness(amount)**: Cycle brightness up/down. Implicitly turns on light.\n  NOTE: This action is for the sake of remote controls with a hold-to-dim button.\n  Please do not use in integrations because it tends to be a frustrating experience.\n  SetBrightness is strongly preferred for its predictability.\n\nNOTE: The brightness level is remembered on TurnLightOff and restored on TurnLightOn.\n\n## LowEndTrim\n\nThe LowEndTrim feature allows a remapping of the brightness levels\nto increase the minimum physical brightness sent to the lights.\nThis is useful with landscape lighting dimmers where the installer has\na choice of luminaires which may have different minimum duty-cycle requirements.\n\nWhen a value of X% brightness is requested via the API (or, of course, via the app),\nthe value will be remapped to Y% before being sent to the lights,\naccoring to the formula:\n\n    Y = (X - 1)*(100 - low_end_trim)/99 + low_end_trim\n\nIn plain English: `low_end_trim` sets the minimum brightness of the lights.\n\nAvailability: Currently on SBB low-voltage dimmers only.\n\n### Properties\n\n - **low_end_trim**: (integer) percentage value of minimum physical brightness\n to send to lights. Set to 1% for full brightness range.\n Allowed range: 1 to 90, inclusive.\n PATCH to `null` to restore factory default.\n\n### State Variables\n\n (none)\n\n### Actions\n\n (none)\n\n\n## UpDownBrightness\n\nThe UpDownBrightness feature extends the Brightness feature to cover\nthe ability of ceiling fans with separately dimmable up and down lights.\n\nThis feature is almost only found on Smart by Bond Ceiling Fans.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **up_light_brightness**: (integer) percentage value of up light brightness, 1-100.\n - **down_light_brightness**: (integer) percentage value of down light brightness, 1-100.\n\n### Actions\n\n- **SetUpLightBrightness(brightness)**: Similar to SetBrightness but only for the up light.\n- **SetDownLightBrightness(brightness)**: Similar to SetBrightness but only for the down light.\n- **IncreaseUpLightBrightness(amount)**: Similar to IncreaseBrightness but only for the up light.\n- **IncreaseDownLightBrightness(amount)**: Similar to IncreaseBrightness but only for the down light.\n- **DecreaseUpLightBrightness(amount)**: Similar to DecreaseBrightness but only for the up light.\n- **DecreaseDownLightBrightness(amount)**: Similar to DecreaseBrightness but only for the down light.\n\nNOTE: The brightness level of each light is remembered on\nTurnLightOff, TurnUpLightOff, TurnDownLightOff and restored on TurnLightOn,\netc.\n\nNOTE: IncreaseBrightness and DecreaseBrightness operate on whichever\n of the up and down lights are enabled, but will never enable or disable\n one or the other light.\n\n## ColorTemp\n\nThe ColorTemp feature is used to control the correlated color temperature (CCT)\nof a light.\n\nThe ColorTemp feature requires the Light and Brightness features,\nand there are currently no products with both ColorTemp and UpDownLight.\nIn other words, all CCT-adjustable products have exactly one dimmable light,\nand if the Brightness option is disabled via feature toggles,\nthe ColorTemp feature will also be disabled.\n\nNote that the color temperature is works in 100 Kelvin (K) steps.\nAttempts to set non-multiples of 100 K will result in undefined rounding behavior.\n\n### Properties\n\n  - **max_color_temp**: (integer) maximum color temperature in Kelvin\n  - **min_color_temp**: (integer) minimum color temperature in Kelvin\n\n### State Variables\n\n  - **color_temp**: (integer) color temperature in Kelvin.\n    Resolution: 100 K\n\n### Actions\n\n  - **SetColorTemp(int)**:\n    Set color temperature.\n    Implicitly turns Light on.\n  - **IncreaseColorTemp(int)**:\n    Increase color temperature a specified number of degrees K.\n    Implicitly turn Light on.\n  - **DecreaseColorTemp(int)**:\n    Increase color temperature a specified number of degrees K.\n    Implicitly turns Light on.\n  - **CycleColorTemp(int)**:\n    Change color temperature in cyclical fashion, similar to CycleBrightness.\n    Implicitly turns on Light.\n    NOTE: This exists for the sake of remote controls,\n    it is generally not useful for integrations,\n    please use SetColorTemp instead.\n  - **CycleColorTempPreset()**:\n    Jump to next preset CCT value from an internal list of presets.\n    Number and value of presets undefined and may vary by model.\n    Useful for very basic integrations where you have just a single push button.\n\n## Color\n\nThe Color feature is available on full color lighting products.\n\nThe Color feature requires the Light and Brightness features.\nThe ColorTemp is optionally also available at the same time as Color.\n\nWhenever `SetBrightness` or other brightness-changing actions are called,\n`rgb` and `hsv` values are updated to reflect the change. For example, if the \nrgb values are (128, 0, 0) with brightness 50, and brightness is increased\nto 100, then rgb values are updated to (255, 0, 0).\n\n### Properties\n\n  (none)\n\n### State Variables\n\n  - **rgb**: (object) JSON object containing the following keys\n     which describe the apparent color of the light.\n     * `r` - (0--255) apparent red value\n     * `g` - (0--255) apparent green value\n     * `b` - (0--255) apparent blue value\n  - **hsv**: (object) similar to `rgb` but for the HSV colorspace.\n     * `h` - (0--359) apparent hue (in degrees)\n     * `s` - (0--100) apparent saturation (in percent)\n     * `v` - (0--100) apparent value in HSV colorspace (in percent).\n             Note that `v` and `brightness` are the same value.\n             Users should typically use `brightness` rather than `v`.\n\n### Actions\n\n  - **SetRGB({r:int, g:int, b:int})**\n    Set color by RGB values.\n    Light is implicitly turned on if off.\n    A subset of the apparent color components may be specified,\n    in which case unspecified values are left unchanged.\n    Example use case is an integration with seperate R, G, and B sliders,\n    which would do SetRGB(r:int) when the red slider is adjusted.\n\n  - **SetHSV({h:int, s:int, v:int})**\n    Set color by HSV values.\n    Light is implicitely turned on if off.\n    A subset of the `h`, `s`, and `v` parameters may be provided.\n    Unspecified parameters will remain unchanged.\n\n    The recommended use case is a 2-D color picker where only the `h` and `s`\n    parameters would be supplied, leaving brightness unchanged.\n\n  - **CycleColorPreset()**\n    Change to next color preset.\n    In HSV-space, these presets are line segments of constant hue\n    and maximum saturation, seperated by 60 degrees.\n    The next color preset is skipped if current hue is within 30 degrees.\n    Light is implicitely turned on if off.\n    Different devices will specify different sets of color presets.\n    This is intended to be used with tapping action on \"Color\" button\n    of RGB SBB products' front-panels.\n\n  - **CycleColor(amount)**\n    Implicitly increase Hue by specified amount, wrapping around. \n    Saturation remains unchanged.\n    Value (brightness) is unchanged.\n    Light is implicitely turned on if off.\n    This is intended to be used with _holding_ action on \"Color\" button\n    of RGB SBB products' front-panels.\n\n## RGBW\n\nThe RGBW feature is available on products which under-the-hood\nactually have four-channel LEDs with a seperate white channel.\n\nThe RGBW feature requires the RGB feature.\n\nWe use a mapping between RGB/HSV-space and RGBW-space,\nwhich is currently to use only the W channel when S is zero,\nand to use only the RGB channels when S is non-zero.\nHowever this is subject to change.\n\nRGBW mapping with ColorTemp feature is currently undefined.\n\n### Properties\n\n  (none)\n\n### State Variables\n\n  - **rgbw**: (object) JSON object containing the following keys\n     which describe the low-level values of the LED channels.\n     These values are updated whenever the color changes.\n     All are integers in the range 0-255:\n     * `r` - low-level red channel\n     * `g` - low-level green channel\n     * `b` - low-level blue channel\n     * `w` - low-level white channel\n\n### Actions\n\n  - **SetRGBW({r:int, g:int, b:int, w:int})**\n    Set low-level values of LED channels.\n    Light is implicitely turned on if off.\n    Note that with SetRGBW, combinations of LED channels can be achieved\n    which are unreachable with SetRGB.\n\n## Flame\n\nThe Flame feature is used by fireplaces to indicate flame level.\n\nThe Flame feature requires the Power feature.\n\n### Properties\n\n### State Variables\n\n - **flame**: (integer) value from 1 to 100. If power=0, flame represents the last flame setting and the flame to which the device resumes when user asks to turn on.\n\n### Actions\n\n- **SetFlame(flame)**: Set flame and turn on. If flame>100, 100 is assumed. If the fireplace is off, implicitly turn on the power. Setting flame to zero or a negative value is ignored.\n- **IncreaseFlame(flame)**: Increase flame level of fireplace by specified number of *flames*. If the fireplace is off, implicitly turn on the power.\n- **DecreaseFlame(flame)**: Decrease flame level by specified number of *flames*. If attempting to decrease fireplace flame below `1`, the fireplace will remain at fflame 1. That is, power will not be implicitly turned off. If the power is already off, DecreaseFlame is ignored.\n\n## Open\n\nThe Open feature is used to describe a device that can be opened and closed.\nCommon use cases are motorized shades and garage doors.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **open**: (integer) 1 = open, 0 = closed\n\n### Actions\n\n- **Open()**: Open the device.\n- **Close()**: Close the device.\n- **ToggleOpen()**: Close the device if it's open, open it if it's closed\n\n### Notes\n\nIf your remote has a discrete stopping command, consider using the **Hold()** action\nto stop the motion of the device.\n\n## Position\n\nThe Position feature is used to describe a device that can be opened\nto a specific position as a percentage.\nThe common use case is motorized shades.\n\nThe Position feature requires the Open feature.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **position**: (integer) value from 0 to 100: 0 = open, 100 = closed.\n\n### Actions\n\n- **SetPosition(position)**: Set device to specified position percentage.\n- **IncreasePosition(amount)**: Close the device by the specified percentage\n of the full range.\n- **DecreasePosition(amount)**: Open the device by the specified percentage\n of the full range.\n\n### Notes\n\n[March 2021] At this time, the Position feature is available only for\ncertain Motorized Shades on the Bond Bridge Pro.\n\nThe feature may be\nenabled or disabled via the feature toggle property `feature_position`,\nanalogous to the other feature toggles.\nHowever, if `course_time` is present, it will need to also be set to a\nnon-negative value before the actions and state variables will be exposed,\nso as to avoid integrations from showing a slider interface without\nthe Bridge having the capability of setting position.\n\n## CourseTime\n\nThe CourseTime feature is used for shades whose RF protocols\ndo not natively support Position. Bond Bridge Pro emulates\na Position feature using a custom dead reckoning algorithm.\nThis requires the client to specify the time required for the\nshade to open or close.\n\nThe CourseTime feature requires the Position feature.\n\n### Properties\n\n - **course_time**: (integer) specifies the amount of time, in milliseconds,\n   required for the device to fully open or close. Depending on the device\n   template, this property may or may not be present. Defaults to -1,\n   meaning unconfigured.\n\n### State Variables\n\n(none)\n\n### Actions\n\n(none)\n\n## FpFan\n\nThe FpFan feature controls a fireplace fan. The FpFan feature is independent\nof the power feature, which for fireplaces indicates whether the flame is on\nor off.\n\n### Properties\n\n(none)\n\n### State Variables\n\n - **fpfan_power**: (integer) 1 = on, 0 = off\n - **fpfan_speed**: (integer) from 1-100\n\n### Actions\n\n- **TurnFpFanOff()**: Turn the fireplace fan off\n- **TurnFpFanOn()**: Turn the fireplace fan on, restoring the previous speed\n- **SetFpFan(speed)**: Sets the speed of the fireplace fan\n\n## Pair\n\nMost shade devices work by pairing rather than cloning of a remote control.\nUse the actions of the Pair feature to manipulate the address table of the appliance.\nNote that appliances have different means of entering pairing mode, \nand different behaviors when the pairing table is full: some override the oldest entry,\nwhile others stop accepting new pair signals until other remotes are unpaired\nor the appliance is factory-reset.\n\nWhen using a well-supported shade technology, the Bond Home app provides detailed guidance\non how to Pair or Unpair available in Device Settings. However, for shades with a lesser\nlevel of support, users need to refer to their remote control or motor's user manual\nfor the pairing procedure, and use the `Pair` or `Unpair` actions in the place of a\nbutton press or hold on the remote control to be added or removed.\n\n### Properties\n\n(none)\n\n### State Variables\n\n(none)\n\n### Actions\n\n- **Pair()**: pair (or toggle pair) the Bridge device with an appliance. \n    Requires user to manually put appliance into pairing mode using a button on the appliance,\n    a button on the appliance's remote control, or sometimes by power-cycling the appliance.\n    If the `Unpair` action is _not_ present, then `Pair` will unpair the device if it is already paired,\n    acting as a toggle;\n    however, if `Unpair` _is_ present, then `Pair` will only pair the device if it is not already paired\n    and can be safely used to assert pairing.\n- **Unpair()**: (optional) unpairs a Bridge device from an appliance,\n    requiring user to manually put appliance into pairing mode.\n- **UnpairSelf()**: (optional) unpairs Bridge device from all appliances in range.\n    Does _not_ require pairing mode.\n\n## Hold\n\nThe Hold feature is available on most shades.\n\n### Properties\n\n(none)\n\n### State Variables\n\n(none)\n\n### Actions\n\n- **Hold()**: Stop the motion of the device. This is useful for stopping the device\n  when the device is moving to a specific position. When Hold is called the device \n  is now in an unknown state and will show as open. Note that Somfy RTS uses the\n  same command for both Hold and Preset (My), so calling Hold while the product is\n  not in motion will send the shade instead to the preset position.\n\n## Preset\n\nThe Preset feature is available on many shades, and we hope to make it available on all shades.\n\n### Properties\n\n(none)\n\n### State Variables\n\n(none)\n\n### Actions\n\n- **Preset()**: Move the device to the preset position, also known as \"My\" or \"Favorite\" position.\n  Note that Bond Bridge does not know the percentage of the preset position, so position will\n  report as -1 (unknown) after this action is called unless your shade has two-way communication\n  (currently limited to IP-IP integrations).\n\n## Misc, including dimmers\n\nCollected here are some actions that may be used with other features, but\nhave no state-change behavior on the Bond.\n\n### Actions\n\n- **Stop()**: This action tells the Bond to stop any in-progress transmission and empty its transmission queue.\n- **StartDimmer()**: Start dimming. The Bond should time out its transmission after 30 seconds, or when the *Stop* action is called.\n- **StartUpLightDimmer()**: Use this and the *StartDownLightDimmer* instead of *StartDimmer* if your device has two dimmable lights.\n- **StartDownLightDimmer()**: The counterpart to *StartUpLightDimmer*\n- **StartIncreasingBrightness()**: Similar to StartDimmer, but doesn't cycle and only increases brightness.\n- **StartDecreasingBrightness()**: Similar to StartDimmer, but doesn't cycle and only decreases brightness.\n"
  },
  "servers": [
    {
      "url": "https://192.168.0.100/",
      "description": "Local API"
    }
  ],
  "paths": {
    "/v2/debug/rfman": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            },
            "description": "RF manager configuration"
          }
        },
        "summary": "Get RF Manager configuration",
        "description": "(Bond Bridge only)\nIntended for use in debugging signal generation. All values false by default,\nand changes do not persist past reboot.\n\n`silence_tx` stops the Bond Bridge\nfrom transmitting anything. It should otherwise behave normally: the LEDs flash,\ndevice state should change, etc.\n\n`log_signals` causes all signals to be sent to sent to any listeners as they\nare generated. They are sent on the topic `debug/rfman/signal`, and could be\nmonitored by a BPUP client listening on this topic. This is intended as a testing\ntool, to verify whether signals are generated as expected.\n",
        "tags": [
          "RF Manager"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RF Manager configured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "400": {
            "description": "Error parsing request"
          }
        },
        "summary": "Configure RF Manager",
        "description": "(Bond Bridge only)\nIntended for use in debugging signal generation. All values false by default,\nand changes do not persist past reboot.\n\n`silence_tx` stops the Bond Bridge\nfrom transmitting anything. It should otherwise behave normally: the LEDs flash,\ndevice state should change, etc.\n\n`log_signals` causes all signals to be sent to sent to any listeners as they\nare generated. They are sent on the topic `debug/rfman/signal`, and could be\nmonitored by a BPUP client listening on this topic. This is intended as a testing\ntool, to verify whether signals are generated as expected.\n",
        "tags": [
          "RF Manager"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "RF Manager settings reset"
          }
        },
        "summary": "Reset RF Manager settings",
        "tags": [
          "RF Manager"
        ]
      }
    },
    "/v2/debug/leds": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Leds"
                }
              }
            },
            "description": "LED state"
          }
        },
        "summary": "Get LED state",
        "description": "Get status from the BLED driver.\n\nIf `manual` is `0`, `value` reflects the instantaneous value of the LEDs,\nand may change rapidly and automatically.\n",
        "tags": [
          "LEDs"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Leds"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LED state was changed successfully"
          },
          "400": {
            "description": "Error parsing request"
          },
          "500": {
            "description": "Driver error"
          }
        },
        "summary": "Manually control LEDs",
        "description": "Use this endpoint to manually control LEDs, such as during factory test.\nBe sure to use the `manual` field to prevent `value` from being overridden\nfrom automatic LED control.\n\nIf `manual` is `0` or absent, `value` may still be set, but may be overridden\nat any time.\n",
        "tags": [
          "LEDs"
        ]
      }
    },
    "/v2/debug/livelog": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveLog"
                }
              }
            },
            "description": "LiveLog configuration"
          },
          "204": {
            "description": "LiveLog disabled"
          }
        },
        "summary": "Get LiveLog configuration",
        "description": "Get the current configuration of the LiveLog component.\n",
        "tags": [
          "LiveLog"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiveLog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "LiveLog configured"
          },
          "400": {
            "description": "Error parsing request"
          }
        },
        "summary": "Configure LiveLog",
        "description": "Instructs Bond to start sending UDP packets to specified IP address and port.\nEvery log message is sent in a seperate UDP packet.\nDepending on log verbosity, this may cause serious performance problems,\nso use wisely.\n\nThis setting does not persist reboot.\n",
        "tags": [
          "LiveLog"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "LiveLog disabled"
          }
        },
        "summary": "Disable LiveLog",
        "tags": [
          "LiveLog"
        ]
      }
    },
    "/v2/debug/wifi": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wifi"
                }
              }
            },
            "description": "Wi-Fi power settings"
          }
        },
        "summary": "Get Wi-Fi power settings",
        "description": "The `shutdown` field indicates the power state of the Wi-Fi (+BLE) radio:\n   - `0`: normal operation\n   - `1`: low-power shutdown mode\n\nIf the `shutdown` field is not present, assume normal operation.\n",
        "tags": [
          "WiFi"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wifi"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wi-Fi power settings changed"
          }
        },
        "summary": "Change Wi-Fi power settings",
        "description": "Set `shutdown` to `1` or `0` to control the Wi-Fi (+BLE) radio power level. A value\nof `1` turns this radio off.\n\nThese settings do not persist past reboot.\n",
        "tags": [
          "WiFi"
        ]
      }
    },
    "/v2/debug/beau/{partition}": {
      "parameters": [
        {
          "in": "path",
          "name": "partition",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeauDb"
                }
              }
            },
            "description": "Database statistics"
          }
        },
        "summary": "Get database statistics",
        "description": "Get some statistics about the main Bond database such as free space available.\n\nThis endpoint exists for each of the partitions on the product which\nuse the Beau database format:\n  - `\"db\"` - the main read-write database where devices and settings are stored\n  - `\"id\"` - the read-only partition containing Bond ID and certificates\n  - `\"state\"` - contains state of each device [Bridges only]\n",
        "tags": [
          "Database"
        ]
      }
    },
    "/v2/bridge": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bridge"
                }
              }
            },
            "description": "Get Bridge info"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get Bridge info",
        "tags": [
          "Bridge"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Bridge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bridge"
                }
              }
            },
            "description": "Change Bridge info"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Change Bridge info",
        "tags": [
          "Bridge"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Reset Bridge info"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset Bridge info",
        "description": "After deletion, default values will be restored.\n",
        "tags": [
          "Bridge"
        ]
      }
    },
    "/v2/sys/locale": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locale"
                }
              }
            },
            "description": "Get Locale info"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get Locale info",
        "tags": [
          "Locale"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Locale"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locale"
                }
              }
            },
            "description": "Change Locale info"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Change Locale info",
        "tags": [
          "Locale"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Reset Locale info"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset Locale info",
        "description": "After deletion, default values will be restored.\n",
        "tags": [
          "Locale"
        ]
      }
    },
    "/v2/devices": {
      "get": {
        "description": "Returns a list of device IDs and the corresponding device hashes.\nThe hashes change if any part of the device (its name, location,\nstate) has changed. Please see the \"Hash Tree\" documentation for\nan example.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceList"
                }
              }
            },
            "description": "List active devices"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "List your devices",
        "tags": [
          "Devices"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new device",
        "tags": [
          "Devices"
        ]
      }
    },
    "/v2/devices/{device_id}": {
      "delete": {
        "responses": {
          "204": {
            "description": "Remove device"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Delete device",
        "tags": [
          "Devices"
        ]
      },
      "get": {
        "description": "Basic device information. The `\"_\"` in each of `state`, `properties`,\n`actions`, and `commands` will change if that endpoint's resource changes.\n\nNOTE: commands are only present on Bridge devices\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": true,
                  "$ref": "#/components/schemas/Device"
                }
              }
            },
            "description": "Get device"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get device",
        "tags": [
          "Devices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": true,
                "$ref": "#/components/schemas/Device",
                "properties": {
                  "location": {
                    "example": "Room",
                    "type": "string"
                  },
                  "name": {
                    "example": "Fan",
                    "type": "string"
                  },
                  "type": {
                    "example": 1,
                    "type": "number"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            },
            "description": "Change device field"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Change device field",
        "tags": [
          "Devices"
        ]
      }
    },
    "/v2/devices/{device_id}/state": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/State"
                }
              }
            },
            "description": "Get device"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get device state",
        "tags": [
          "Device State"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/State"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "State belief updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Update state belief",
        "description": "Update the Bond's belief about the state of a device.\n\nThis is useful, for example, for Ceiling Fans that have a command\nfor ToggleLight, but no discrete commands TurnLightOn and TurnLightOff.\nIn this case, it is possible for the Bond's belief about the device\nstate to be incorrect, and so this method allows that belief\nto be corrected.\n\nThis does NOT cause the Bond to transmit any control signal.\n\n(Bridge-Only)\n\nYou can modify the state of the device lock using the `_lock_priority` and `_lock_expiration` fields. \nTo reset the lock to its default state while still honoring the priority of other requests that may\nhave occurred, use the negative value of the previously set priority.\n\nExample: If your API sets a `_lock_priority` of 60 when interacting with a device, you can remove \nthe lock by setting it to a value of -60. The lock will only be reset to the default value of \n100 if the current priority matches the specified negative value.\n",
        "tags": [
          "Device State"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/devices/{device_id}/addr": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteAddr"
                }
              }
            },
            "description": "Get SBB Remote Address"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get SBB Remote Address and Learn Window",
        "description": "[SBB-only]\nProvides the current SBB remote address and information about the learn window.\nThe SBB unit will only honor commands received with a matching address.\n\nNOTE: If `addr0_is_dip` is present and true, then the first address (addr0)\ncorresponds to physical \"DIP\" switches on the receiver.\nThe client _may_ take this into account by seperately listing this \"DIP\"\nsetting from the rest of the addresses which may be set via the API.\nNote that the special address `0xdead` indicates that the DIP setting\nis being ignored (after it has been explicitely deleted via the API).\n",
        "tags": [
          "Device Remote Address"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteAddr"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteAddr"
                }
              }
            },
            "description": "Modify Device Remote Address or Learn Window"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Modify Device Remote Address or Learn Window",
        "description": "[SBB-only]\nModify either the Device Remote Address or open/close the learn window.\nWhile the learn window is open, the SBB unit may learn\na new physical remote when user presses the Learn button\n(or holds down the Power/Stop button for 5 seconds).\n\nNote that on most SBB receivers, the learn window is automatically opened\nwhen electrical power is first connected. This is the typical \"auto-learning\" function.\nHowever, on recievers with DIP switches\n(`addr0_is_dip`), the learn window must be opened manually. This is because\nthose receivers follow the conceptually simpler model of \"you gotta set the DIP\nswitches on the reciever and transmitter to match\" without any \"magic learning\"\noccuring---at least until you use the Manage Remotes feature of the Bond Home app\nor this endpoint directly.\n\nNote that to add a new remote address, the `addr` field should be PATCHed\nwith a single string, not an array. The provided address will be appended\nto the array of addresses, with the oldest address being overwritten if\nlen(`addr[]`) was already equal to `addr_slots`.\n\nIf the same address is learned which was already in the list,\nthe duplicate *will indeed* be added.\nThis is to allow an installer to use a low-tech way of forgetting\nunwanted remotes---by re-learning the same remote 5 times---which the\ninstallers are used to doing with similar receivers.\n\nThis endpoint is useful especially where there are multiple SBB devices\non the same mains circuit.\n",
        "tags": [
          "Device Remote Address"
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Remote address successfully reset, learn window closed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteAddr"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset Device Remote Address and Learn Window",
        "description": "[SBB-only]\nIf no `addr` is provided, then:\n  Restores factory default Device Remote Address and closes learn window.\n  If the receiver has DIP switches (`addr0_is_dip`) then the default address\n  will be determined by the position of those DIP switches.\n\nHowever, if `addr` is provided, then:\n  Removes just the specified address from the list.\n  If the receiver has DIP switches (`addr0_is_dip`)\n  and the address being deleted is the first one (addr0)\n  then that address will be changed to `0xdead`.\n  This is useful if a receiver is installed with DIP switches\n  indicating an address which is being used by a neighbor.\n  To avoid interference, the user can delete addr0 via the app.\n  NOTE: Any change to the DIP switches on the reciever will\n  cause the addr0 to change to reflect that new DIP setting.\n",
        "tags": [
          "Device Remote Address"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/devices/{device_id}/reload": {
      "put": {
        "responses": {
          "204": {
            "description": "Device definition reloaded"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Reload device",
        "tags": [
          "Device Reload"
        ],
        "description": "Reload the command table for the given device definition. This deletes all\ncurrent commands and rebuilds the device definition's default commands.\nThis will overwrite any user customization of the commands, such as\nrenaming, icon changes, and deleting commands.\n\nThe device's `state` and `properties` are preserved, in order to avoid a loss of control.\n\nThis endpoint may be called after a template device definition has been updated\nto cause newly-defined or modified commands to be exported to the device panel.\n\nThis endpoint is only available for a device with a `template` string.\n"
      },
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/devices/{device_id}/properties": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Properties"
                }
              }
            },
            "description": "Get device properties"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get device properties",
        "description": "See the Features section above for other properties which may be available\non your devices.\n\nA quick description of `trust_state` by example follows:\n\nThe scenario: the Bond has a \"ToggleLight\" command, and the Bond believes\nthe light to be on. The user requests the action \"LightOn\". If the Bond trusts\nits state, it will *do nothing*, as the light is already on, and sending a\ntoggle command would turn it off. If, however, the Bond does not trust its\nstate, it will send the toggle, and believe that now it knows the true state\nof the physical device.\n\n`trust_state` set to `false` is mostly useful if the user intends to use a\nphysical remote together with the Bond and is the default, `trust state` set\nto `true` is mostly useful if the user would like to control their device\nremotely with complete confidence that what the Bond reports is the device's\nactual state.\n",
        "tags": [
          "Device Properties"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Properties"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Properties updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Update properties",
        "description": "See the documentation of the individual properties for whether they can be PATCHed.\n",
        "tags": [
          "Device Properties"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/devices/{device_id}/power_cycle_state": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PowerCycleState"
                }
              }
            },
            "description": "Current Power Cycle State"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Read Power Cycle State",
        "description": "This feature is intended to be used with smart Ceiling Fan receivers\nthat are connected to \"dumb\" wall switches. Many users have existing\nnon-smart ceiling fans which are connected to non-smart wall switches.\nThese non-smart ceiling fans typically have some pull switches where\nthe user can set the desired state, and then the wall switch is used\nas the means of operating the device. For example, the ceiling fan may\nbe the primary light source in the room, and the user relies on the wall\nswitch as a normal light switch. When they then make the fan smart\nby adding a Smart By Bond receiver to the fan, they expect that they\ncan continue to use the wall switch. A problem arises when the user\nturns off the fan light using the API (Alexa, app, etc.) and then\nenters the room and attempts to operate using the wall switch. The fan\nwill remain in the state with light off. The Power On State feature allows\nusers to guarantee a prefered state every time the device powers on,\nmaking it easier to use in a situation where the wall switch is relied upon.\n\nThis feature is only available on certain SBB products where it makes sense,\nspecifically all ceiling fans. We have not enabled it on in-wall switches\nand dimmers and other SBB products where there is only a power supply\nor circuit breaker behind the product, rather than there possibly being\na user-facing \"dumb\" wall switch.\n\n[SBB-only, added in v2.17]\n",
        "tags": [
          "Power Cycle State"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerCycleState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PowerCycleState"
                }
              }
            },
            "description": "Power Cycle State updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Update Power Cycle State",
        "tags": [
          "Power Cycle State"
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PowerCycleState"
                }
              }
            },
            "description": "Power Cycle State restored to factory default"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Set Power Cycle State to defaults",
        "description": "Deleting the Power Cycle State for a Device will cause it to revert\nto the default as programmed from the factory. This is typically\na disabled state. For most API clients, it makes more sense to use\nPATCH rather than DELETE.\n",
        "tags": [
          "Power Cycle State"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/devices/{device_id}/actions/{action_name}": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Args",
                "type": "object",
                "properties": {
                  "_lock_priority": {
                    "type": "number",
                    "optional": true,
                    "description": "The priority number desired for the lock, from 1 to 999.\nIf not specified, defaults to the default priority of 100. \n"
                  },
                  "_lock_expiration": {
                    "type": "number",
                    "description": "The expiration time desired for the lock, in miliseconds. Use 0 for\nacquiring the lock with immediate expiration.\n"
                  }
                },
                "example": {
                  "argument": 4,
                  "_lock_priority": 50,
                  "_lock_expiration": 5000
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed [since v2.12.4]",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "argument": 4,
                    "_lock_priority": 50,
                    "_lock_expiration": 4900
                  }
                }
              }
            }
          },
          "204": {
            "description": "Action executed [prior to v2.12.4]"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "423": {
            "$ref": "#/components/responses/Locked"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Execute a device action",
        "description": "`action_name` is the name of the action from the `actions` list in\nthe response to GET `/devices/{device_id}`.\n\nThis endpoint blocks until confirmation that the Bond has executed\nthe action. Timeout shall be no more than 7 seconds.\n\nTo check the resulting state, the client may query\n`/devices/{device_id}/state`.\n\nSee the Features section to learn what the various actions mean,\nand what argument is expected, if any.\nFor example, the action `SetSpeed` takes an integer parameter\nwhich is the desired speed number.\n\nWhen performing an action, the device can be locked with a priority and \nexpiration time, using the optional fields `_lock_priority` and `_lock_expiration`. \n\nAny other action that has a lower priority (higher priority number) will not\nbe executed if the `_lock_expiration` is not expired. Actions with higher\npriority (lower priority number) will be executed and will acquire the lock.\n\nIf `_lock_priority` is not specified, the default value `100` is assumed.\n",
        "tags": [
          "Device Actions"
        ],
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "action_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/devices/{device_id}/commands": {
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Returns a list of command IDs and the corresponding command hashes.\nPlease see the \"Hash Tree\" documentation for an explanation of hashes.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandList"
                }
              }
            },
            "description": "Command list returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get list of Commands",
        "tags": [
          "Device Commands"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Command"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Command",
        "description": "Creates a Command under a specific Device.\n",
        "tags": [
          "Device Commands"
        ]
      }
    },
    "/v2/devices/{device_id}/commands/{command_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "command_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Command"
                }
              }
            },
            "description": "Command object returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get specific Command",
        "description": "Get information about a Command.\n",
        "tags": [
          "Device Commands"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Command"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Command",
        "description": "Modifies any fields of an existing Command.\n",
        "tags": [
          "Device Commands"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Command deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Command",
        "description": "Deletes specified Command.\n\nAny associated Signal will be implicitly deleted.\n",
        "tags": [
          "Device Commands"
        ]
      }
    },
    "/v2/devices/{device_id}/commands/{command_id}/signal": {
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "command_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "Signal returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Signal associated with Command",
        "description": "Get signal associated with this command.\n",
        "tags": [
          "Device Command Signal"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signal set"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Store new Signal",
        "description": "Creates a Signal associated with this Command.\n",
        "tags": [
          "Device Command Signal"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signal modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Signal",
        "description": "Modifies any fields of an existing Signal.\n",
        "tags": [
          "Device Command Signal"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Signal deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Signal",
        "description": "Deletes specified Signal.\n\nAttempts to use the corresponding Actions will return 500 until\na new Signal is associated with this Command or the Command is deleted.\n",
        "tags": [
          "Device Command Signal"
        ]
      }
    },
    "/v2/devices/{device_id}/commands/{command_id}/tx": {
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "command_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "example": {}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Command transmitted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Transmit Command",
        "description": "Transmits the signal associated with the command.\n\nNote: This does NOT execute the associated Action,\n but rather just transmits the signal as if it had been PUT to signal/tx,\n so the device state will not be updated and light gating will not be checked.\n",
        "tags": [
          "Device Command Transmit"
        ]
      }
    },
    "/v2/devices/{device_id}/skeds": {
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Returns a list of sked_ids and the corresponding sked hashes.\nPlease see the \"Hash Tree\" documentation for an explanation of hashes.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkedList"
                }
              }
            },
            "description": "Device Schedule list returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get list of Device Schedules",
        "tags": [
          "Device Schedules"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sked"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Device Schedule",
        "description": "Creates a Device Schedule under a specific Device.\n\nIf the timezone or location settings in `sys/time` are not set,\na 400 error may result depending on what `mark` is requested.\nSpecifically, the following requests will result in an 400 error:\n\n   - POSTed `mark` is `midnight` but `sys/time.tz` is `null`\n   - POSTed `mark` is `dawn`, `dusk`, `sunrise`, or `sunset`, but `sys/time.grid` or `sys/time.tz` is `null`\n",
        "tags": [
          "Device Schedules"
        ]
      }
    },
    "/v2/devices/{device_id}/skeds/{sked_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "device_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "sked_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sked"
                }
              }
            },
            "description": "Device Schedule object returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get specific Device Schedule",
        "description": "Get information about a Device Schedule.\n",
        "tags": [
          "Device Schedules"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Device Schedule modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Device Schedule",
        "description": "Modifies any fields of an existing Device Schedule.\n",
        "tags": [
          "Device Schedules"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Device Schedule deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Device Schedule",
        "description": "Deletes specified Device Schedule.\nNaturally, the Device Schedule will be canceled.\n",
        "tags": [
          "Device Schedules"
        ]
      }
    },
    "/v2/groups": {
      "get": {
        "description": "Returns a list of Group IDs and the corresponding Group hashes.\nThe hashes change if any part of the Group (its name, state, type, etc.)\nhas changed. The hash is not updated if underlying Devices are updated\nin a way which does not effect the Group state or type.\n\nGroups are supported on Bridges and on Smart by Bond.\nGroups may span multiple Bonds (Bridges and SBB devices) by using the same\nGroup ID on each Bond. See the introductory section \"Groups and Scenes\".\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupList"
                }
              }
            },
            "description": "List Groups"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "List your Groups",
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Group",
        "description": "For the creation of a Group distributed across multiple Bonds,\nclients should provide a 64-bit ID for the Group and provide that\nsame ID in each Group POST request in the `_id` field. See\nintroductory section \"Groups and Scenes\" for detail. If the `_id`\nfield is not provided, a random ID will be assigned as with\nPOST requests to other enumerations.\n\nA Group is created containing the device IDs in the `devices` array.\nUsing the `devices` field requires\nthe client to predetermine what devices are compatible in the sense\nof having a non-empty Actions intersection. If even a single device is\nincompatible, then the entire POST will fail with a 400 error.\n\nNote that `types` and `locations` fields cannot be specified when\ncreating a Group: these fields are calculated based on the member Devices.\n",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v2/groups/{group_id}": {
      "get": {
        "description": "Groups are collections of Devices.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": true,
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Get Group"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get Group",
        "tags": [
          "Groups"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": true,
                "$ref": "#/components/schemas/Group",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Change Group field"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Change Group field",
        "description": "The `devices` list may be PATCHed to perform a bulk change to the membership in the group.\nA 400 error is returned if the devices are incompatible.\n\nIf the `devices` list is PATCHed to empty, the group shard will vanish.\nThat is, the group shard will be removed from the groups enumeration.\nThe groups enumeration will be sent as a gratuitous GET response.\n",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Delete Group"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Delete Group",
        "description": "The entire Group is deleted.\n",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v2/groups/{group_id}/state": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas_State"
                }
              }
            },
            "description": "Get Group State"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get Group State",
        "description": "Group State lists those state variables which are common to all member\nDevices. If all member Devices have the same value for a particular state\nvariable, then the Group variable will take that value. However, if member\nDevices differ in value, then the Group variable will take the value `null`.\n\nNote that Group states cannot be PATCHed.\n",
        "tags": [
          "Group State"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/groups/{group_id}/properties": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Properties"
                }
              }
            },
            "description": "Get Group properties"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get Group properties",
        "description": "See the Features section above for other properties which may be available\non your Groups.\n\nSimilar to the Group State object, the Properties available for a Group\nare those Properties which exist on every Device in the Group.\nIf all Devices have the same value for a Property, then that value will\nbe provided here. If Devices do not agree on a value, then that Property\nwill be listed but with a `null` value.\n",
        "tags": [
          "Group Properties"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Properties"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Properties updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Update properties",
        "description": "PATCHing one or more Group Properties implicitely PATCHes those Properties\non all Devices in the Group. Gratuitous PATCH replies are sent for each\nDevice before this PATCH reply returns. If any errors occur in any of the\nunderlying Device PATCH requests, this request will return a 500 error\nand the Devices' Properties will be left in undefined condition.\n\nExample: If you set up 8 individual shades in your kitchen and then add\nthem all to a Group, you can then, with a single request, enable or disable\nthe `feature_position` Property to enable/disable the \"slider\" feature.\n",
        "tags": [
          "Group Properties"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/groups/{group_id}/actions/{action_name}": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "argument": 4
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "argument": 4
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Execute a Group Action",
        "description": "`action_name` is the name of the action from the `actions` list in\nthe response to GET `/groups/{group_id}`.\n\nThis endpoint blocks until confirmation that the Bond has executed\nthe Action on all member Devices. Timeout shall be no more than 7 seconds.\n\nTo check the resulting state, the client may query\n`/groups/{group_id}/state`, but the member Device States are also updated.\n",
        "tags": [
          "Group Actions"
        ],
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "action_name",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/groups/{group_id}/skeds": {
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Returns a list of sked_ids and the corresponding sked hashes.\nPlease see the \"Hash Tree\" documentation for an explanation of hashes.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkedList"
                }
              }
            },
            "description": "Group Schedule list returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get list of Group Schedules",
        "tags": [
          "Group Schedules"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sked"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Group Schedule",
        "description": "Creates a Group Schedule under a specific Group.\n\nIf the timezone or location settings in `sys/time` are not set,\na 400 error may result depending on what `mark` is requested.\nSpecifically, the following requests will result in an 400 error:\n\n   - POSTed `mark` is `midnight` but `sys/time.tz` is `null`\n   - POSTed `mark` is `dawn`, `dusk`, `sunrise`, or `sunset`, but `sys/time.grid` or `sys/time.tz` is `null`\n",
        "tags": [
          "Group Schedules"
        ]
      }
    },
    "/v2/groups/{group_id}/skeds/{sked_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "sked_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sked"
                }
              }
            },
            "description": "Group Schedule object returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get specific Group Schedule",
        "description": "Get information about a Group Schedule.\n",
        "tags": [
          "Group Schedules"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group Schedule modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Group Schedule",
        "description": "Modifies any fields of an existing Group Schedule.\n",
        "tags": [
          "Group Schedules"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Group Schedule deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Group Schedule",
        "description": "Deletes specified Group Schedule.\nNaturally, the Group Schedule will be canceled.\n",
        "tags": [
          "Group Schedules"
        ]
      }
    },
    "/v2/scenes": {
      "get": {
        "description": "Returns a list of Scene IDs and the corresponding Scene hashes.\nThe hashes change if any part of the Scene (its name, state, type, etc.)\nhas changed. The hash is not updated if underlying Actors (Devices and/or Groups) are updated\nin a way which does not effect the Scene state or type.\n\nScenes are supported on Bridges and on Smart by Bond.\nScenes may span multiple Bonds (Bridges and SBB devices) by using the same\nScene ID on each Bond. See the introductory section \"Groups and Scenes\".\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SceneList"
                }
              }
            },
            "description": "List Scenes"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "List your Scenes",
        "tags": [
          "Scenes"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Scene"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Scene",
        "description": "For the creation of a Scene distributed across multiple Bonds,\nclients should provide a 64-bit ID for the Scene and provide that\nsame ID in each Scene POST request in the `_id` field. See\nintroductory section \"Groups and Scenes\" for detail. If the `_id`\nfield is not provided, a random ID will be assigned as with\nPOST requests to other enumerations.\n\nA Scene is created containing the actor IDs and actions to execute in the `actors` array.\n\nNote that `types` and `locations` fields cannot be specified when\ncreating a Scene: these fields are calculated based on the member Devices.\n",
        "tags": [
          "Scenes"
        ]
      }
    },
    "/v2/scenes/{scene_id}": {
      "get": {
        "description": "Scenes are a set of actions to run on Devices and/or Groups\nwith a single request.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": true,
                  "$ref": "#/components/schemas/Scene"
                }
              }
            },
            "description": "Get Scene"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Get Scene",
        "tags": [
          "Scenes"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "scene_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ],
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": true,
                "$ref": "#/components/schemas/Scene",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scene"
                }
              }
            },
            "description": "Change Scene field"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Change Scene field",
        "description": "The `actors` list may be PATCHed to perform a bulk change to the membership in the scene.\n\nIf the `actors` list is PATCHed to empty, the scene shard will vanish.\nThat is, the scene shard will be removed from the scenes enumeration.\nThe scenes enumeration will be sent as a gratuitous GET response.\n",
        "tags": [
          "Scenes"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Delete Scene"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Delete Scene",
        "description": "The entire Scene is deleted.\n",
        "tags": [
          "Scenes"
        ]
      }
    },
    "/v2/scenes/{scene_id}/run": {
      "put": {
        "description": "Execute specified Scene.\nEach actor will be executed individually.\n\nFor shade hembar alignment on supported technologies,\nplease use a Group as an actor in the Scene.\n",
        "responses": {
          "204": {
            "description": "Scene executed"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "OAuth": [
              "oauth2"
            ]
          }
        ],
        "summary": "Execute Scene",
        "tags": [
          "Scenes"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "scene_id",
          "required": true,
          "schema": {
            "type": "number"
          }
        }
      ]
    },
    "/v2/scenes/{scene_id}/skeds": {
      "parameters": [
        {
          "in": "path",
          "name": "scene_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "description": "Returns a list of sked_ids and the corresponding sked hashes.\nPlease see the \"Hash Tree\" documentation for an explanation of hashes.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkedList"
                }
              }
            },
            "description": "Scene Schedule list returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get list of Scene Schedules",
        "tags": [
          "Scene Schedules"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sked"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new Scene Schedule",
        "description": "Creates a Scene Schedule under a specific Scene.\n\nNote that `action` must not be set for Scene Schedules.\n\nIf the timezone or location settings in `sys/time` are not set,\na 400 error may result depending on what `mark` is requested.\nSpecifically, the following requests will result in an 400 error:\n\n   - POSTed `mark` is `midnight` but `sys/time.tz` is `null`\n   - POSTed `mark` is `dawn`, `dusk`, `sunrise`, or `sunset`, but `sys/time.grid` or `sys/time.tz` is `null`\n",
        "tags": [
          "Scene Schedules"
        ]
      }
    },
    "/v2/scenes/{scene_id}/skeds/{sked_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "scene_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "sked_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sked"
                }
              }
            },
            "description": "Scene Schedule object returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get specific Scene Schedule",
        "description": "Get information about a Scene Schedule.\n",
        "tags": [
          "Scene Schedules"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scene Schedule modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Scene Schedule",
        "description": "Modifies any fields of an existing Scene Schedule.\n",
        "tags": [
          "Scene Schedules"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Scene Schedule deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Scene Schedule",
        "description": "Deletes specified Scene Schedule.\nNaturally, the Scene Schedule will be canceled.\n",
        "tags": [
          "Scene Schedules"
        ]
      }
    },
    "/v2/sidekicks": {
      "get": {
        "description": "Returns a list of Sidekicks.\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SidekickList"
                }
              }
            },
            "description": "Sidekick list returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get list of Sidekicks",
        "tags": [
          "Sidekicks"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sidekick"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add a Sidekick to Bridge.",
        "description": "Adds a Sidekick by ID. The Sidekick ID shall be specified by client\nin the `_id` field of POST request body. The newly created resource\ncan be found at `sidekicks/{sk_id}` where `sk_id` is the ID provided\nin `_id`.\n",
        "tags": [
          "Sidekick"
        ]
      }
    },
    "/v2/sidekicks/{sk_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "sk_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sidekick"
                }
              }
            },
            "description": "Sidekick object returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get specific Sidekick",
        "description": "Get information about a Sidekick.\n",
        "tags": [
          "Sidekick"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sidekick"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sidekick modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Sidekick's metadata and links",
        "description": "Modifies metadata and/or links of a Sidekick.\nThe `chan_link` field has complex PATCH logic allowing adding,\nmodifying, and deleting links. Example·s:\n\nPlease note, in the following examples, we abbreviate. Be sure to add\ndouble-quotes around strings for correct JSON, especially the channel\nand key numbers which must be strings by JSON standard.\n\n### Adding a Link\n\nAssume we start with nothing linked:\n\n> chan_links:{ 1:[], 2:[], 3:[], 4:[], 5:[] }\n\nNow let's add a link to channel 4:\n\n> PATCH {chan_links={4:[{device=abcdef0abcdef0}]}  \n> &rarr; chan_links : { 1:[], 2:[], 3:[], 4:[{device=abcdef0abcdef0, direct=1}], 5:[] }\n\nNote how the `direct` field is populated based on the channel technology\nand the technology of the linked device. This is not modifyable from the API.\nUsers need to manually change channel technology via Sidekick's menu codes\nif needed.\n\nAnd now let's add another link to the same channel:\n\n> PATCH {chan_links={4:[{}, {device=1122334400000000}]}  \n> &rarr; chan_links : { 1:[], 2:[], 3:[], 4:[{device=abcdef0abcdef0, direct=1}, {device=1122334400000000, direct=0}], 5:[]}\n\nNote that we do not need to pass the previous device ID, instead\nusing an empty object as a placeholder for the link in the array\nwhich we want to leave alone.\n\nMultiple new links can be added in a single PATCH by specifying\nmore than one additional element in the array. Links can even \nbe added for multiple channels, for example:\n\n> PATCH {chan_links={1:[{device=aaaaaaaa}], 2:[{device=bbbbbbbb}]}}\n> &rarr; chan_links : { 1:[{device=aaaaaaaa}], 2:[{device=bbbbbbbb}], 3:[], 4:[{device=1234567aabbccdd, direct=1}, {device=1122334400000000, direct=0}], 5:[]}\n\n### Deleting Links\n\nTo delete a link, put a `null` in the array location(s) which you want\n to remove.\n\n> PATCH {chan_links={4:[null, {}]}}\n> &rarr; chan_links : { 1:[], 2:[], 3:[], 4:[{device=1122334400000000, direct=0}, {device=1234567aabbccdd, direct=1}], 5:[]}\n\nBe sure to specify the correct number of array elements. In the above,\nit would be an error to just patch `[null]`; you must send `[null, {}]`\nto delete the first element but preserve the second element. To delete \nboth elements, you could send `[null, null]`.\n\nYou can also delete links from multiple channels at once:\n\n> PATCH {chan_links={1:[null], 2:[null]}\n> &rarr; chan_links : { 1:[], 2:[], 3:[], 4:[{device=1122334400000000, direct=0}], 5:[]}\n\n### Editing a Link\n\nYou can edit a link to change the device ID:\n\n> PATCH {chan_links={4:[{device=1234567aabbccdd}, {}]}}  \n> &rarr; chan_links : { 1:[], 2:[], 3:[], 4:[{device=1234567aabbccdd, direct=1}, {device=1122334400000000, direct=0}], 5:[]}\n\nBe sure to specify the exact number of elements in the channel array\nbeing modified. In the above example, we still need `{}` for the\nsecond link as a placeholder.\n\nIt is possible to mix adding, editing, and deleting links in a single\nPATCH request.\n",
        "tags": [
          "Sidekick"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Sidekick deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Sidekick",
        "description": "Deletes specified Sidekick.\n",
        "tags": [
          "Sidekick"
        ]
      }
    },
    "/v2/sidekicks/{sk_id}/keystream": {
      "parameters": [
        {
          "in": "path",
          "name": "sk_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keystream"
                }
              }
            },
            "description": "Keystream object"
          },
          "204": {
            "description": "No content, only available via BPUP."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get key event.",
        "description": "This endpoint is pushed whenever a new key event occurs on the \ncorresponding Sidekick. This is only intended to be used via BPUP\nand/or MQTT. GET requests via HTTP will only ever return 204 No Content.\n",
        "tags": [
          "Keystream"
        ]
      }
    },
    "/v2/sidekicks/_learn": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Learn"
                }
              }
            },
            "description": "Get Sidekick learn status"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Sidekick learn status",
        "description": "[BBP-only]\n\nProvides information about the Sidekick learn window on this Bond.\n\nWhen the learn window is open, the Bond will listen for a link intent.\nSpecifically, it listens for a BondSync message of type LINK or \ntype KEYSTREAM with HOLD event and duration greater than 2 seconds.\n\n[New in v3.10]\n",
        "tags": [
          "Sidekick Learn"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Learn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Learn"
                }
              }
            },
            "description": "Open or close Sidekick learn window"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Open or close Sidekick learn window",
        "description": "[BBP-only]\nOpen/close the learn window.\n\nThe learn window is never automatically opened. Must be opened by API.\n",
        "tags": [
          "Sidekick Learn"
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Learn window closed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Learn"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Close learn window.",
        "description": "Close the learn window. Identical to PATCH learn_window_open=false.\n",
        "tags": [
          "Sidekick Learn"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "sk_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/signal/tx": {
      "delete": {
        "responses": {
          "204": {
            "description": "Signal transmission canceled"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Cancel a Transmission",
        "description": "If a Signal is being transmitted, it is immediately interrupted,\nand a 204 is returned.\n\nA 204 is also returned even if there was no Signal being transmitted.\n\nNOTE: Internally, this flushes the radio command queue,\n so any requested transmissions which were queued\n waiting for an earlier tranmission to complete will also be canceled.\n This also cancels any queued scans, but does not cancel a scan already in progress.\n",
        "tags": [
          "Transmit"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signal"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Signal transmit started"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Transmit a Signal",
        "description": "Transmit an RF or IR signal from a Bond Bridge.\n\nIf `use_scan` is present and true, the signal recorded by the previous scan\nwill be used, and all other fields will be ignored\n",
        "tags": [
          "Transmit"
        ]
      }
    },
    "/v2/signal/rssi": {
      "get": {
        "responses": {
          "200": {
            "description": "Receive Signal Strength",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rssi"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Receive Signal Strength Indication (RSSI)",
        "description": "Sweeps over the frequency range supported by the product,\nand returns a list of frequency-rssi ordered pairs.\n\nThis is useful for determining tuning of antennas.\n",
        "tags": [
          "Rssi"
        ]
      }
    },
    "/v2/signal/scan": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Scan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Signal transmit started"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Start a Scan",
        "description": "Start scanning for RF/IR signals.\n",
        "tags": [
          "Scan"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Scan info returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scan"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Check scan progress",
        "description": "Get information about a scan in progress,\nor the last completed scan.\n",
        "tags": [
          "Scan"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Scan canceled"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Cancel a Scan",
        "description": "Immediately stop scanning, and delete results.\n",
        "tags": [
          "Scan"
        ]
      }
    },
    "/v2/signal/scan/signal": {
      "get": {
        "responses": {
          "200": {
            "description": "Signal resulting from scan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Signal from a Scan",
        "description": "Get the signal resulting from the most recent scan\n",
        "tags": [
          "Scan Result"
        ]
      }
    },
    "/v2/token": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenGet"
                }
              }
            },
            "description": "Local token status"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "summary": "Get Local API Token",
        "description": "Request token for accessing Bond over local network.\n\nIf `locked` is true, reply will contain neither `token` nor `account_code`.\n\nTypical use case for this endpoint is:\n\n   - request GET, finding that the endpoint is locked\n   - perform PATCH with `\"locked\": 0`, the correct `pin`,\n     and your `account_code` (if you want to take ownership of the Bond)\n   - request GET again to get `token`\n   - perform PATCH with `\"locked\": 1`\n\nAlternatively, user may perform the proof-of-ownership event\n(such as holding down the Power button on a SBB remote for 5 sec),\nwhich will unlock the endpoint. In that case, the API client should\npoll GET waiting for unlock.\n\nLastly, this endpoint is unlocked for 10 minutes following power cycle.\n\nNote: The token is not required for /sys/version and /token endpoints.\nHowever, all other endpoints require token to be provided in a BOND-Token\nHTTP header.\n",
        "tags": [
          "Token"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenPatch"
                }
              }
            },
            "description": "Token unlocked"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Add Bond to an Account (or Unlock Token)",
        "description": "If locked, provide `pin` (located on the product label) to unlock this endpoint.\nIf `pin` is not provided or incorrect, a 401 will be returned.\n\nIf an `account_code` is provided, saves it to the Bond. When the Bond communicates\nwith the backend, the Bond will be added to the account associated with\n`account_code`. You can find your `account_code` on the user screen in the mobile\napp.\n\nYou can also use this endpoint to simply find out your Bond's locked `token`\nby providing a `pin`\n",
        "tags": [
          "Token"
        ]
      }
    },
    "/v2/api/mqtt": {
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mqtt_Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MQTT Reconfigured"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Configure MQTT Transport",
        "description": "IMPORTANT NOTE: MQTT redirection is currently untested. If you have a use\ncase for this API, please let us know on [the forums](https://forum.bondhome.io/)\nso that we can better prioritize implementing this API.\n\nConfigure the Bond's MQTT Transport, which is used for communication\nwith the Bond Cloud or an offline MQTT broker.\nNote that Bond uses MQTT over TLS with certificate-based authentication.\nPassword-based authentication is not supported.\n\nSome advanced users may elect to run their own MQTT brokers,\nso this endpoint allows customizing of the MQTT broker address\nand the various related security settings.\n\nNote that any manipulation of this endpoint will result in the\nBond disconnecting from Bond Cloud, and therefore integrations\nand control away from home will become unavailable.\n\nNOTE: All settings only take effect after reboot.\n",
        "tags": [
          "MQTT"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "MQTT Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mqtt_Schema"
                }
              }
            }
          },
          "204": {
            "description": "No custom MQTT configuration found"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get MQTT Configuration",
        "tags": [
          "MQTT"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "MQTT config reset to default"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset MQTT Config to defaults",
        "tags": [
          "MQTT"
        ]
      }
    },
    "/v2/api/bpup": {
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bpup_Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "BPUP Reconfigured"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Configure BPUP Transport",
        "description": "Configure the Bond's BPUP transport.\n",
        "tags": [
          "BPUP"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "BPUP Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bpup_Schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get BPUP Configuration",
        "tags": [
          "BPUP"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "BPUP config reset to default"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset BPUP Config to defaults",
        "tags": [
          "BPUP"
        ]
      }
    },
    "/v2/api/bhk": {
      "get": {
        "responses": {
          "200": {
            "description": "Bond HomeKit configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bhk_Schema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get Bond HomeKit configuration.",
        "tags": [
          "HomeKit"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bhk_Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bond HomeKit enabled info updated."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Enable or disable the Bond HomeKit integration.",
        "tags": [
          "HomeKit"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Bond HomeKit info reseted.\nThat means the Bond will delete all info, unpairing if paired and set enabled to default (0).\nIf you have not removed the Bond from your account on Home app, the Bond and its devices\nwill show as not responding. You can remove from the Home app later as usual.\n"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset Bond HomeKit configuration, unpairing if paired.",
        "tags": [
          "HomeKit"
        ]
      }
    },
    "/v2/sys/wifi/scan": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas_Scan"
                }
              }
            },
            "description": "Scan results"
          },
          "204": {
            "description": "No results available yet"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Scan for Wi-Fi networks",
        "description": "A GET request starts a new Wi-Fi network scan (unless a scan is already in progress),\nand returns the results of the most recently completed scan. It is not an error for scan to be\ncalled before the scan has completed; however, the old results will be returned.\nA 204 is returned if no scan has been run yet since boot.\n\nThe `results` are returned as a nested JSON array (a 2D table) rather than a JSON object for compactness.\nThe `format` array gives the meaning of each column of the `results` table.\n\nThe `ssid` field contains the network name. It is base64-encoded because arbitrary characters are allowed by the Wi-Fi standard.\n\nThe `auth` field gives the type of network security:\n  - 0 = unsecured (open)\n  - 1 = WEP\n  - 2 = WPA PSK\n  - 3 = WPA2 PSK\n  - 4 = WPA/WPA2 PSK\n  - 5 = WPA2 Enterprise [currently unsupported by Bond]\n\nNote that for `auth` types 0 and 1, the application should\nwarn the user that the network could be more secure,\nand should be set to WPA2 for best security.\n\nThe `signal` field contains an indication of access point signal quality\n(which may be derived from signal strength and/or signal-to-noise ratio),\nranging from 0 to 100.\n\nIf `hidden_requires_bssid` is present and true, and the user wants to connect\nto a hidden network, the user must supply the BSSID (that is, the MAC address\nof the access point).\n",
        "tags": [
          "Wi-Fi Scan"
        ]
      }
    },
    "/v2/sys/wifi/sta": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sta"
                }
              }
            },
            "description": "Current Wi-Fi settings"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get current Wi-Fi settings",
        "description": "Get the name (base64-encoded in `ssid`) of the Wi-Fi network to which the Bond is currently connected.\n\nA numerical `status` field is also provided (see details below).\n\nThe BSSID of the network's access point is provided, hex-encoded in `bssid`.\nIf `bssid_set` is present and `true`, then the Bond has been configured to\nonly connect to an access point with a specific BSSID, specified in an\nearlier PUT.\n\nThe MAC address of the Bond is also provided, hex-encoded in `mac`. If this MAC\naddress is not available, it will be `null`.\n\nSome network configuration fields are returned: the Bond's IP address (`ip`),\nits default gateway (`gw`), its netmask (`netmask`), and its DNS and fallback\nDNS (`dns` and `dns_alt`). `static_ip_set` is present and `true` if a previous\nPUT has configured the Bond to use static values for these field. `dns_set`\nand `dns_alt_set` are present and `true` if an earlier PUT has configured the\nDNS used by the Bond.\n",
        "tags": [
          "Wi-Fi Station"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sta"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sta"
                }
              }
            },
            "description": "New Wi-Fi settings"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Connect to a Wi-Fi network",
        "description": "For compatibility reasons, the PATCH endpoint can also be accessed\nusing the PUT method.\n\nInstruct the Bond to connect to the network specified.\n\nThe Bond immediately saves the settings in non-volatile storage,\nand therefore the settings will persist even after power cycle.\n\nThe network name must be specified in `ssid` (base64-encoded).\nA `password` (again base64-encoded) is required unless it is an unsecured (open) network.\nThe required security type (WEP/WPA/WPA2) is automatically determined by the Bond.\n\nFor DNS, Bond always tries default DNS servers first. However, our chosen\nDNS servers are blocked on some networks, so Bond will fall back to DNS\nservers provided by DHCP or specified by `dns` and `dns_alt`. If `dns` or\n`dns_alt` are provided, Bond will ignore any DNS servers proposed\nby DHCP. This behavior was decided upon after many customer service interactions\nwhich revealed an epidemic of bad ISP DNS servers which prevent what we\noriginally though was reasonable: respecting the DHCP-provided servers by default.\n\nIf `bssid` is present, the Bond will only connect to an access point with the supplied,\nhex-encoded BSSID.\n",
        "tags": [
          "Wi-Fi Station"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Wi-Fi network disconnected"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Disconnect from Wi-Fi network",
        "description": "The Bond will disconnect from the current Wi-Fi network,\nand will not attempt to reconnect, even after a power cycle.\nIt will be necessary to use PUT again to reconfigure Wi-Fi.\n",
        "tags": [
          "Wi-Fi Station"
        ]
      }
    },
    "/v2/sys/wifi/watchdog": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watchdog"
                }
              }
            },
            "description": "Network Watchdog settings"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Check Network Watchdog configuration",
        "tags": [
          "Network Watchdog"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Watchdog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Network Watchdog config updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Configure Network Watchdog",
        "description": "Configure the Wi-Fi watchdog, which runs whenever the Wi-Fi station (`sta`)\nis configured.\n\nThis watchdog feature is useful on some Wi-Fi networks where the Bond\nmay lose its connection after some period of time.\n",
        "tags": [
          "Network Watchdog"
        ]
      }
    },
    "/v2/sys/eth": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eth"
                }
              }
            },
            "description": "Current Etherent settings"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Ethernet unsupported on this product."
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get current Ethernet settings",
        "description": "Note that there are seperate DNS settings for the Ethernet and Wi-Fi\ninterfaces.\n",
        "tags": [
          "Ethernet"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Eth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Eth"
                }
              }
            },
            "description": "Ethernet settings updated"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Customize Ethernet settings",
        "description": "For compatibility reasons, the PATCH endpoint can also be accessed\nusing the deprecated PUT method.\n\nCustomize the Ethernet interface.\n\nThe Bond immediately saves the settings in non-volatile storage,\nand therefore the settings will persist even after power cycle.\n\nFor DNS, Bond always tries default DNS servers first. However, our chosen\nDNS servers are blocked on some networks, so Bond will fall back to DNS\nservers provided by DHCP or specified by `dns` and `dns_alt`. If `dns` or\n`dns_alt` are provided, Bond will ignore any DNS servers proposed\nby DHCP. This behavior was decided upon after many customer service interactions\nwhich revealed an epidemic of bad ISP DNS servers which prevent what we\noriginally though was reasonable: respecting the DHCP-provided servers by default.\n",
        "tags": [
          "Ethernet"
        ]
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Ethernet settings reset to defaults"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Reset Ethernet Settings to Default",
        "description": "Bond will clear settings for Ethernet, defaulting to DHCP,\nDHCP-provided DNS (with fallback to hard-coded DNS servers),\nand Ethernet being preferred over Wi-Fi if both are available.\n\nThis will NOT disable the Ethernet port. If the attached network\nsupports DHCP and has an internet connection, the Bond will continue\nto function on Ethernet.\n",
        "tags": [
          "Ethernet"
        ]
      }
    },
    "/v2/sys/upgrade": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Progress"
                }
              }
            },
            "description": "Upgrade progress"
          },
          "204": {
            "description": "No upgrade in progress"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get firmware upgrade status",
        "description": "Check the progress of a firmware upgrade.\n\nNote that when an upgrade completes successfully,\nthis endpoint will return a 204 again. The client should\ncheck the `sys/version` endpoint to determine whether\nthe new firmware is being used.\n",
        "tags": [
          "Upgrade"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Upgrade"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Progress"
                }
              }
            },
            "description": "Progress of newly started upgrade"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "description": "Upgrade already in progress"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Start a new firmware upgrade",
        "description": "Instruct the Bond to upgrade to the specified firmware.\n\nThe client may specify both `port` (HTTPS) and `http_port` (HTTP).\nBond will use whichever protocol is implemented in the firmware.\n\nDuring the upgrade, the client SHOULD query GET to monitor progress.\n\nWhether or not the Bond reboots spontaneously at the end of the upgrade\nprocess is dependent on the client specifying the reboot parameter.\n\nIf spontaneous reboot is requested,\nBond will become unreachable for a period of time during the upgrade.\nWhen the Bond becomes reachable again,\nGET will return 204 No Content, at which time the client should check\nsys/version to determine whether the upgrade was successful.\n\nNote that network connection is slow on some networks,\nespecially with Bond Bridge 1st Generation,\ntherefore the client MUST NOT declare an error\nuntil a reasonable timeout period (7 minutes).\n\nNote that network issues may cause the Bond to remain inaccessible\ndespite the update having succeeded.\nFurthermore, the probability of a failure of the upgrade mechanism\nafter the reboot step is very low.\nTherefore the client should represent a timeout in upgrading\nas a communication error rather than a firmware upgrade error.\n\nIn the case that the client did not specify reboot=1,\nBond will not reboot spontaneously and the progress indication\nwill reach 1000 and remain there\nuntil the client issues an explicit reboot (via sys/reboot).\nAfterwards the client can confirm firmware upgrade\nsuccess by checking version as usual.\n",
        "tags": [
          "Upgrade"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "No upgrade in progress (anymore)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Cancel any running firmware upgrade",
        "description": "The Bond will cancel any firmware upgrade in progress.\n\nCanceling a firmware upgrade is always safe.\n\nHowever, power cycling a Bond during a firmware upgrade is not recommended.\n",
        "tags": [
          "Upgrade"
        ]
      }
    },
    "/v2/sys/version": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            },
            "description": "Product verison information"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get version info",
        "description": "Get detailed version information about hardware and firmware.\n",
        "tags": [
          "Version"
        ]
      }
    },
    "/v2/sys/reset": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Reset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset started"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Reset",
        "description": "Perform a reset operation, of which there are several types:\n\n**Setup reset** will cause:\n   - serves as proof-of-ownership event so as to:\n     - cause Bond Config AP to reappear\n     - allow the product to be set up on a new Wi-Fi network\n     - allow adding to a new Bond account\n   - Wi-Fi station details may be lost, depending on the product\n   - Bond will not reboot\n\n**Factory reset** will cause:\n  - complete erasure of Bond's local database. Specifically:\n    - All devices and settings will be lost\n    - Bond will need to be reconnected to Wi-Fi\n  - Bond will also reboot\n  - Bond will remain on the current firmware version.\n",
        "tags": [
          "Reset"
        ]
      }
    },
    "/v2/sys/reboot": {
      "put": {
        "responses": {
          "200": {
            "description": "Rebooting"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Reboot",
        "description": "Reboot Bond. No settings are modified.\n\nThis does NOT perform a factory reset!\n",
        "tags": [
          "Reboot"
        ]
      }
    },
    "/v2/sys/time": {
      "get": {
        "responses": {
          "200": {
            "description": "Time info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Time"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get time info",
        "description": "Get information about Bond system time, timezone, and grid location.\n",
        "tags": [
          "Time"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Time"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Time info updated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify time info",
        "description": "Set timezone, grid location, and/or time.\n\nIf `tz` is set to `null`, all skeds based on a local time (mark=midnight) will\nbe disabled.\n\nLikewise, if `grid` is set to `null`, all skeds based on solar marks will be\ndisabled.\n",
        "tags": [
          "Time"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Time info reset"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Reset time info to defaults",
        "description": "Forget time, timezone, and grid location.\n\nAs a consequence, all skeds will be immediately disabled (enabled=false).\n",
        "tags": [
          "Time"
        ]
      }
    },
    "/v2/sys/power": {
      "get": {
        "responses": {
          "200": {
            "description": "Power Supply info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Power"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get power supply info",
        "description": "Get information about Power Supply status (which supply is active).\n\nSent gratuitously upon change to active supplies.\n",
        "tags": [
          "Power"
        ]
      }
    },
    "/v2/sys/backup": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Backup status"
          },
          "204": {
            "description": "No recent Backup/Restore."
          }
        },
        "summary": "Check Backup status",
        "description": "Shows whether a backup or a restore is running,\nincluding progress indication, and error messages.\nAfter operation completes, the `backup` or `restore`\nfield is set to `2` (or `-1` in case of error)\nand the other fields remain accessible\nfor the client to confirm operation completion.\nClient should DELETE the endpoint after confirming to return\nendpoint to empty (204 status).\n\nNote that only one operation can run at once.\n",
        "tags": [
          "Backup"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Backup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Backup/Restore started"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Start a Backup or Restore",
        "description": "Start a backup or restore operation,\n\nNOTE: A backup will send all devices and associated data\n(commands, properties, state, skeds) the specified server.\nSettings not associated with a particular device\n(such as network settings, bridge name and location) are not included.\n\nNOTE: A restore will update devices in an additive fashion.\nFor each device (and command or sked), if a device already exists\nwith the same key, then it is updated. If no such device exists,\nthen it will be created.\n",
        "tags": [
          "Backup"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Backup/Restore canceled"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Cancel Backup or Restore",
        "description": "Cancel a failed operation, or clear the success/error status.\n",
        "tags": [
          "Backup"
        ]
      }
    },
    "/v2/sidekicks/{ws_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "ws_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherSensor"
                }
              }
            },
            "description": "Weather Sensor object returned"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get specific Weather Sensor",
        "description": "Get information about a Weather Sensor. \n\nIn the Bond architecture, all Bond products\ncapable of commanding devices through the Bridge are \nconsidered different kinds of Sidekicks. \nThis is why the Weather Sensor appears in the `/sidekicks/{ws_id}` tree.\n\nFor the Weather Sensor, devices are linked using `event_links`, \nwhere a different event number means\none of the possible weather events.\n\nFor a complete explanation of how patch logic works for modifying \nlinked devices, refer to the `sidekick` documentation.\n",
        "tags": [
          "Weather Sensor"
        ]
      },
      "patch": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeatherSensor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sidekick modified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify an existing Weather Sensor metadata and links",
        "description": "Modifies metadata and/or links of a Weather Sensor.\nPlease, refer to Sidekick explanation of linking/unlinking of actions.\n",
        "tags": [
          "Weather Sensor"
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Sidekick deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete a Weather Sensor",
        "description": "Deletes specified Weather Sensor.\n",
        "tags": [
          "Weather Sensor"
        ]
      }
    },
    "/v2/sidekicks/{ws_id}/properties": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas_Properties"
                }
              }
            },
            "description": "Weather Sensor properties object"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get properties of a Weather Sensor.",
        "description": "This endpoint is used to get the current properties of a Weather Sensor.\n",
        "tags": [
          "Weather Sensor Properties"
        ]
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas_Properties"
                }
              }
            },
            "description": "Weather Sensor properties object"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Modify properties of a Weather Sensor.",
        "description": "This endpoint is used to modify the properties of a Weather Sensor.\nUse this call to modify detection thresholds and enabling/disabling features.\n",
        "tags": [
          "Weather Sensor Properties"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "ws_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/sidekicks/{ws_id}/state": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas_State-2"
                }
              }
            },
            "description": "Get Weather Sensor state"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get Weather Sensor current state",
        "description": "Get the current state of a Weather Sensor. This object\nincludes the last measurement and flags indicating the status of the sensor.\n",
        "tags": [
          "Weather Sensor State"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "ws_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/v2/sidekicks/{ws_id}/test": {
      "put": {
        "responses": {
          "200": {
            "description": "Test/Simulation of weather event requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "event_name": "rain"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Test/simulate weather events, triggering linked actions.",
        "description": "Execute all linked actions for the specified event type. Usefull for\nsimulating weather events to check if device actions are configured\nas expected.\n\nObject member `event_name` must be the event of interest. Allowed values are:\n- `wind`: for simulating the wind event.\n- `rain`: for simulating the rain event.\n- `sun_high`: for simulating the sun level event.\n",
        "tags": [
          "Weather Sensor Test"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "ws_id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "x-tagGroups": [
    {
      "name": "Devices",
      "tags": [
        "Devices",
        "Device State",
        "Device Properties",
        "Device Actions",
        "Device Remote Address",
        "Device Reload",
        "Power Cycle State"
      ]
    },
    {
      "name": "Commands",
      "tags": [
        "Device Commands",
        "Device Command Signal",
        "Device Command Transmit"
      ]
    },
    {
      "name": "Groups",
      "tags": [
        "Groups",
        "Group Devices",
        "Group State",
        "Group Properties",
        "Group Actions"
      ]
    },
    {
      "name": "Scenes",
      "tags": [
        "Scenes"
      ]
    },
    {
      "name": "Schedules",
      "tags": [
        "Device Schedules",
        "Group Schedules",
        "Scene Schedules"
      ]
    },
    {
      "name": "Sidekick",
      "tags": [
        "Sidekick",
        "Sidekick Learn",
        "Keystream"
      ]
    },
    {
      "name": "Weather Sensor",
      "tags": [
        "Weather Sensor",
        "Weather Sensor Properties",
        "Weather Sensor State",
        "Weather Sensor Test"
      ]
    },
    {
      "name": "Bridge",
      "tags": [
        "Bridge"
      ]
    },
    {
      "name": "Signals",
      "tags": [
        "Transmit",
        "Scan",
        "Scan Result",
        "Rssi"
      ]
    },
    {
      "name": "API",
      "tags": [
        "Token",
        "MQTT",
        "BPUP",
        "HomeKit"
      ]
    },
    {
      "name": "Network",
      "tags": [
        "Wi-Fi Scan",
        "Wi-Fi Station",
        "Ethernet",
        "Network Watchdog"
      ]
    },
    {
      "name": "System",
      "tags": [
        "Upgrade",
        "Version",
        "Backup",
        "Reset",
        "Reboot",
        "Time",
        "Power",
        "Locale"
      ]
    },
    {
      "name": "Debug",
      "tags": [
        "Database",
        "LiveLog",
        "LEDs",
        "WiFi",
        "RF Manager"
      ]
    }
  ],
  "components": {
    "schemas": {
      "Schema": {
        "properties": {
          "log_signals": {
            "example": false,
            "type": "boolean"
          },
          "silence_tx": {
            "example": false,
            "type": "boolean"
          }
        }
      },
      "Leds": {
        "properties": {
          "n": {
            "example": 5,
            "type": "number",
            "description": "Number of LEDs present.\n",
            "readOnly": true
          },
          "manual": {
            "example": 1,
            "type": "number",
            "description": "- `0` : LEDs behave normally (default)\n- `1` : LED automatic control disabled, will remain fixed as set\n"
          },
          "value": {
            "example": "FF000000FF000000FFFFFFFF000000",
            "type": "string",
            "description": "Concatinated 24-bit RGB hex values for each of the `n` LEDs.\n\nIn the example, the 5 LEDs are set to Red, Green, Blue, White,\nand Off, respectively.\n"
          }
        }
      },
      "LiveLog": {
        "properties": {
          "ip": {
            "example": "192.168.1.102",
            "type": "string"
          },
          "port": {
            "example": 1337,
            "type": "number"
          }
        }
      },
      "Wifi": {
        "properties": {
          "shutdown": {
            "example": 1,
            "type": "number"
          }
        }
      },
      "BeauDb": {
        "properties": {
          "live_records": {
            "example": 20,
            "type": "string",
            "description": "Number of \"live\" records in the database.\n"
          },
          "dead_records": {
            "example": 33,
            "type": "string",
            "description": "Number of \"dead\" records in the database.\nThese are records marked for deletion but which have not yet been\nerased through compaction.\n"
          },
          "empty_pages": {
            "example": 0,
            "type": "string",
            "description": "Number of pages which are entirely empty.\nThis will be large initially, then reduce to 1 (the swap page).\nThis may be 0 for older databases and in case of power loss\nduring compaction, however it should go back to 1 after the next\ncompaction as a new swap page results.\n"
          },
          "total_dead": {
            "example": 110824,
            "type": "string",
            "description": "Total amount of memory used by dead records.\nDead records are counted as free space.\n"
          },
          "total_free": {
            "example": 900421,
            "type": "string",
            "description": "Total free space in database (including dead space), in bytes.\n"
          },
          "max_free": {
            "example": 4002,
            "type": "string",
            "description": "Maximum freespace of any page, in bytes,\nexcepting the swap page (a single empty page kept to permit\ncompaction).\nIn current (v2.6) implementation, this is the typical limit on\nthe largest record which can be written to the database.\n"
          },
          "total_head": {
            "example": 900421,
            "type": "string",
            "description": "Total free space in database (including dead space), in bytes.\n"
          },
          "min_head": {
            "example": 15,
            "type": "string",
            "description": "Minimum amount of headroom of any page, in bytes.\nThis dictates the smallest record which could result in a compaction.\n"
          },
          "compactions": {
            "example": 1,
            "type": "string",
            "description": "Number of compactions performed since boot.\n"
          },
          "size": {
            "example": 1048576,
            "type": "string",
            "description": "Total size of database, in bytes.\n"
          },
          "page_size": {
            "example": 4096,
            "type": "string",
            "description": "Size of each page, in bytes.\n"
          },
          "dirty": {
            "example": false,
            "type": "boolean",
            "description": "Indicates that a write failed and database is in an inconsistant state.\n"
          }
        }
      },
      "Bridge": {
        "properties": {
          "location": {
            "example": "My Room",
            "type": "string"
          },
          "name": {
            "example": "My Bridge",
            "type": "string"
          },
          "bluelight": {
            "example": 127,
            "type": "integer",
            "description": "Amount of blue light emitted from the Bond when it's idle: at `0` the light is off,\nand at `255` the light is at its maximum brightness.\n"
          },
          "frequencies": {
            "readOnly": true,
            "example": [
              [
                38,
                38
              ],
              [
                433050,
                434079
              ]
            ],
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "List of intervals (inclusive) of supported frequencies,\nin kHz. Values less than 1000 refer to IR rather than RF.\nClients should prevent users from selecting frequencies outside\nthis range to avoid 400 errors on transmit and scan endpoints.\n[added in v2.15]\n"
          }
        }
      },
      "ErrorBaseSchema": {
        "properties": {
          "_error_id": {
            "example": 1,
            "type": "number"
          }
        }
      },
      "Unauthorized": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBaseSchema"
          },
          {
            "properties": {
              "_error_msg": {
                "example": "You need authentication credentials to continue",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "NotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBaseSchema"
          },
          {
            "properties": {
              "_error_msg": {
                "example": "Resource not found",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBaseSchema"
          },
          {
            "properties": {
              "_error_msg": {
                "example": "Something unexpected happened (this field will have a description of the problem)",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "Locale": {
        "properties": {
          "compliance_region": {
            "example": "au",
            "type": "string",
            "description": "Region for radio frequency compliance.\nThis option must be set by the client (Bond Home app) during setup.\nString is a two-digit country code (ISO 3166-1 alpha-2).\nSupported options:\n  - us: USA, Canada, Mexico\n  - au: Australia [v2.15]\n"
          }
        }
      },
      "DeviceList": {
        "type": "object",
        "example": {
          "_": "7fc1e84b",
          "3b20f300": {
            "_": "9a5e1136"
          },
          "4caf6472": {
            "_": "409d124b"
          }
        }
      },
      "Device": {
        "properties": {
          "name": {
            "example": "My Fan",
            "type": "string"
          },
          "type": {
            "description": "- `CF` : Ceiling Fan\n- `FP` : Fireplace\n- `MS` : Motorized Window Coverings (Shades, Screens, Drapes) and Awnings\n- `GX` : Generic device\n- `LT` : Light\n- `BD` : Bidet\n\nThis `type` field does not impact the functionality of the device.\nThe `type` field should be used by API clients to improve the user experience.\nFor example, the Bond Home app uses this field to determine what icon to show\nwhen browsing a list of Devices on the Bridge.\n\nThe `type` field *may* be used by integrations to determine the category of interface to be selected\nwhen such a selection is mandated by the platform. For example, Google Assistant integration\nrequires developers to choose a device type such as Fan or Light.\nhowever we strongly encourage developers to implement the functional aspects of integrations based on\nFeatures (i.e., available Actions, State variables, and Properties).\n",
            "example": "CF",
            "type": "string"
          },
          "subtype": {
            "description": "[Added in v2.21]\n\nThe subtype field is used to distinguish between categories of devices sublter than the `type` field permits.\n\nCurrently, subtype is only used for Motorized Window Coverings and Awnings (`type = MS`), with the following options:\n\n - `ROLLER`: a roller blackout shade which blocks light and provides privacy\n - `SHEER`: a shade which permits light to pass and does not provide privacy\n - `AWNING`: an outdoor patio covering\n\nThis field does not impact functionality in any way.\nFurthermore, the `subtype` field must only be used for analytics and aesthetic purposes by the API client.\nNew subtypes may be introduced without notice. API clients should always be prepared to fall back to a reasonable\ndefault based on the device `type`.\n\nThe `subtype` field is not limited by the firmware, but rather specified by Bond internally and included\nin Device creation requests from the Bond Home app.\n\nWARNING: Although currently it is not the case, at some point the same `subtype` string may be re-used with\ndifferent meanings between different device `types`. To take a hypothetical example, we may have a gas-powered\nfireplace device (`type = FP, subtype = GAS`) but also a gas-powered bidet (`type = BD, subtype = GAS`).\n",
            "example": "AWNING",
            "type": "string"
          },
          "template": {
            "description": "An internal name describing what sort of protocol the remote represented\nby the device implements. Upon a POST with a valid template string, the\ndevice self-populates its panel with some default controls, initializes\nits state, and finds a script to define its behavior.\n\nMost templated devices need additional parameters, such as an address\n`addr`, frequency `freq`, bits per second `bps`, and length of the zeros\nbetween repetititions `zero_gap`. These should be specified in an object\n`properties` in the POST body.\n",
            "example": "A1",
            "type": "string"
          },
          "location": {
            "example": "Kitchen",
            "type": "string"
          },
          "actions": {
            "readOnly": true,
            "type": "array",
            "example": [
              "TurnOn",
              "TurnOff",
              "TogglePower",
              "SetSpeed",
              "IncreaseSpeed",
              "DecreaseSpeed"
            ]
          },
          "properties": {
            "readOnly": true,
            "type": "object",
            "example": {
              "_": "84cd8a43"
            }
          },
          "state": {
            "readOnly": true,
            "type": "object",
            "example": {
              "_": "ad9bcde4"
            }
          },
          "commands": {
            "readOnly": true,
            "type": "object",
            "example": {
              "_": "ad9bcde4"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "Created": {
        "properties": {
          "_id": {
            "example": "01234567",
            "type": "string",
            "description": "id of new device"
          }
        },
        "type": "object"
      },
      "BadRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBaseSchema"
          },
          {
            "properties": {
              "_error_msg": {
                "example": "The resource wasn't created because of a validation problem (This field will have a description of the problem)",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "Conflict": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBaseSchema"
          },
          {
            "properties": {
              "_error_msg": {
                "example": "The resource wasn't created because of a field conflict",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "State": {
        "example": {
          "breeze": [
            1,
            0.2,
            0.9
          ],
          "brightness": 75,
          "light": 1,
          "power": 0,
          "speed": 2,
          "timer": 3599
        },
        "properties": {
          "_lock_priority": {
            "type": "number",
            "description": "Device lock priority number.\n"
          },
          "_lock_expiration": {
            "type": "number",
            "description": "Remaining time for expiration of the lock, in miliseconds.\n"
          }
        }
      },
      "RemoteAddr": {
        "properties": {
          "addr": {
            "example": [
              "dead",
              "0f2a",
              "0002",
              "0003"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Learned remote address(es) in hexadecimal,\nmay be patched only with a single address string to be added.\n"
          },
          "addr_slots": {
            "example": 5,
            "type": "integer",
            "readOnly": true,
            "description": "Maximum number of addresses which can be learned by this device.\nTypical values are 1 (for devices whose corresponding transmitters\nship with DIP switches, allowing the user to manually put all\ntransmitters on the same address) and 5 (for devices where each\ntransmitter is shipped with a random address).\n"
          },
          "learn_window_ms": {
            "example": 60000,
            "type": "integer",
            "readOnly": true,
            "description": "Duration of learn window (milliseconds).\n"
          },
          "learn_window_remaining_ms": {
            "example": 1100,
            "type": "integer",
            "readOnly": true,
            "description": "Milliseconds remaining before learn window closes.\n"
          },
          "learn_window_open": {
            "example": true,
            "type": "boolean",
            "description": "Whether new address can be learned via RF.\nTrue iff learn_window_remaining_ms is nonzero.\n"
          },
          "learn_count": {
            "example": 0,
            "type": "integer",
            "readOnly": true,
            "description": "Number of times a new address has been learned on this boot.\nUseful in UI design to know that the learn process completed,\neven if the learned address is the same.\n"
          },
          "addr0_is_dip": {
            "example": true,
            "type": "boolean",
            "description": "If present and true, indicates that the receiver has DIP switches\nwhich may be adjusted to set the zeroth address.\n"
          }
        }
      },
      "Properties": {
        "properties": {
          "trust_state": {
            "example": false,
            "type": "boolean",
            "description": "Whether or not the Bond should trust its toggleable state belief.\nThis is the confidence the Bond has that this device's state\nbelief is accurate, and is only present if a \"Toggle\" command is present\n(for `power`, `light`, `direction`, etc.), and is `false` by default.\n(Bridge-only)\n"
          },
          "addr": {
            "readOnly": true,
            "example": "10101",
            "type": "string",
            "description": "(Bridge-only)"
          },
          "freq": {
            "readOnly": true,
            "example": 434300,
            "type": "integer",
            "description": "(Bridge-only)"
          },
          "bps": {
            "readOnly": true,
            "example": 3000,
            "type": "integer",
            "description": "(Bridge-only)"
          },
          "zero_gap": {
            "readOnly": true,
            "example": 30,
            "type": "integer",
            "description": "(Bridge-only)"
          }
        }
      },
      "PowerCycleState": {
        "properties": {
          "enabled": {
            "example": false,
            "type": "boolean",
            "description": "If true, device will revert to specified state after power loss.\nIf false, device will maintain previous state across power loss\n(\"Last State\" feature).\n"
          },
          "state": {
            "example": {
              "light": 1,
              "brightness": 100,
              "power": 0,
              "speed": 3
            },
            "type": "object",
            "description": "State to revert to after power loss.\nSame schema as for Device state.\n"
          }
        }
      },
      "Args": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "speed"
          },
          "value": {
            "type": "string",
            "example": "70%"
          }
        }
      },
      "Locked": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBaseSchema"
          },
          {
            "properties": {
              "_error_msg": {
                "example": "Device is locked with non expired higher priority",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "CommandList": {
        "type": "object",
        "example": {
          "_": "7fc1e84b",
          "3b20f300": {
            "_": "9a5e1136"
          },
          "4ad874d2": {
            "_": "84819a9f"
          },
          "a94328bc": {
            "_": "23141efa"
          },
          "d87d6ef2": {
            "_": "2425a8bc"
          }
        }
      },
      "Command": {
        "type": "object",
        "properties": {
          "name": {
            "example": "Light",
            "type": "string",
            "description": "Name of corresponding button displayed in Bond App\n"
          },
          "action": {
            "example": "SetSpeed",
            "type": "string",
            "description": "Action which should be triggered when button is pressed.\n"
          },
          "argument": {
            "example": 3,
            "nullable": true,
            "description": "Argument of `action`. If absent, no argument will be used.\nMay be any JSON value, not only an object.\n"
          },
          "icon": {
            "example": "speed_3",
            "type": "string",
            "description": "Icon slug. (This is the base of the name of the icon to use to represent\nthis command in the App.)\n"
          },
          "category_name": {
            "example": "fan",
            "type": "string",
            "description": "The category in which to group this command.\n"
          },
          "button_type": {
            "example": "tap",
            "type": "string",
            "description": "The type of button to use for this command.\n"
          },
          "hidden": {
            "example": true,
            "type": "boolean",
            "description": "Whether to hide this command in the mobile app. Useful for exposing an\naction, but not showing its command on the device panel.\n"
          }
        },
        "required": [
          "name",
          "action"
        ]
      },
      "Signal": {
        "required": [
          "freq",
          "data",
          "bps",
          "encoding"
        ],
        "type": "object",
        "properties": {
          "freq": {
            "example": 434000,
            "type": "number",
            "description": "Frequency in kHz:\n  - `>= 1000` is RF\n  - `< 1000` is IR\n\nBond Bridge can only receive IR signals at or near 38 kHz,\nand will report all IR signals as 38 kHz.\n\nBond Bridge currently transmits all IR signals at 38 kHz also.\n"
          },
          "modulation": {
            "example": "OOK",
            "type": "string",
            "description": "- `OOK` = on-off keying\n- `GFSK` = gaussian frequency-shift keying\n\nIf not provided, defaults to `OOK`.\n"
          },
          "data": {
            "example": "110100110110H",
            "type": "string",
            "description": "String representation of data bits to be transmitted.\n\nThe maximum length of the data string is 6144 bytes.\n"
          },
          "encoding": {
            "example": "cq",
            "type": "string",
            "description": "Specifies the encoding of the data string.\n\nIn all cases, the duration of each bit is 1/`bps` seconds.\n\n### CQ encoding (`\"cq\"`)\n\nThis is a simple encoding where bits are represented using `0` and `1`,\n  with some abbreviations for sequences of bits.\n\nEach character represents one or more bits:\n\n  - `0` single zero bit\n  - `1` single one bit\n  - `C` 2^0 (1) zero bits\n  - `D` 2^1 (2) zero bits\n  - `E` 2^2 (4) zero bits\n  - `F` 2^3 (8) zero bits\n  - ...\n  - `Q` 2^14 (16384) zero bits\n  - `c` thru `q` are just like `C` thru `Q`, but for one bits\n  - `A` the three bits 110\n  - `B` the three bits 011\n\n### Hex (`\"hex\"`)\n\nThis is a simple encoding where the data string consists of hex bytes.\nEach hex byte represents 8 bits of data.\n\nHex encoding is currently limited to only work at `40000` bps.\n\nThis is the default encoding for scan results.\n"
          },
          "bps": {
            "example": 1000,
            "type": "number",
            "description": "Bitrate of `data`. Range is 100 to 40000.\n"
          },
          "reps": {
            "example": 12,
            "type": "number",
            "description": "Number of times that data should be repeated.\n\nIf not provided, `1` is assumed.\n"
          },
          "use_scan": {
            "example": true,
            "type": "boolean",
            "writeOnly": true,
            "description": "If present and true, the Signal recorded by the most recent scan will\nbe used, with all other fields ignored\n"
          }
        }
      },
      "SkedList": {
        "type": "object",
        "example": {
          "_": "7fc1e84b",
          "3b20f300": {
            "_": "9a5e1136"
          },
          "4ad874d2": {
            "_": "84819a9f"
          },
          "a94328bc": {
            "_": "23141efa"
          },
          "d87d6ef2": {
            "_": "2425a8bc"
          }
        }
      },
      "Sked": {
        "type": "object",
        "properties": {
          "enabled": {
            "example": true,
            "type": "boolean",
            "description": "If false, schedule will never execute, but will remain in Bond database.\n\nOneshot schedules (with `days_of_week` all False) automatically\ndisable after executing once.\n\nDefaults to true on PUT and POST.\n"
          },
          "action": {
            "example": "SetBrightness",
            "type": "string",
            "description": "Action which will be run on actor when schedule executes.\nRequired for Device and Group actors. Must not be set for Scene actors.\nIf action requires an argument, `argument` field is required.\n"
          },
          "argument": {
            "example": 80,
            "description": "Argument to action, if needed.\n"
          },
          "seconds": {
            "example": -3600,
            "type": "integer",
            "description": "Time at which schedule should execute, relative to `mark`,\nin seconds. Negative numbers indicate \"before\" the mark,\npositive numbers indicate \"after\" the mark.\n"
          },
          "days_of_week": {
            "example": [
              false,
              true,
              true,
              true,
              true,
              true,
              false
            ],
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "description": "Days of week on which the schedule should execute.\n\nFirst element is for Sunday, last element is for Saturday.\n\nThe example value is for a schedules that executes only on weekdays.\n\nSpecial case: if array is all `false`, the sked will run exactly once\nand will then disable itself (enabled=false). This is rendered on UIs as\na \"Run Once\" option.\n\nDefault: run every day, that is, array of 7 trues\n"
          },
          "mark": {
            "example": "sunset",
            "type": "string",
            "description": "Event which serves as the benchmark for the daily relative time.\nOptions are:\n   - `midnight`: `seconds` is the time in seconds\n     since midnight in the timezone specified by the sys/time endpoint.\n\n   - `sunrise`: `seconds` is seconds before or after local sunrise,\n     as calculated using the Grid Locator (see sys/time endpoint).\n\n   - `sunset`: like sunrise but when the sun goes down!\n\n   - `dawn`: `seconds` is seconds before or after local civil dawn:\n     that is, when it gets light outside before sunrise.\n     This is when sun is 6 degrees below the horizon.\n\n   - `dusk`: like dawn, but for civil dusk: when it actually gets dark\n     some time after sunset, when the sun has descending 6 degrees below the horizon.\n\n**For our beloved customers near or within the Arctic Circle:** please note that\n there will be periods of days around the solstices that\n schedules based on the solar marks will not execute.\n"
          }
        },
        "required": [
          "action",
          "seconds",
          "mark",
          "days_of_week"
        ]
      },
      "GroupList": {
        "type": "object",
        "example": {
          "_": "7fc1e84b",
          "3b20f300": {
            "_": "9a5e1136"
          },
          "4caf6472": {
            "_": "409d124b"
          }
        }
      },
      "Group": {
        "properties": {
          "name": {
            "example": "Kitchen Shades",
            "type": "string"
          },
          "devices": {
            "description": "List of member Device IDs.\n\nThis field may be set during Group creation,\nor may be updated using PATCH.\n",
            "type": "array",
            "example": [
              "aabbccdd",
              "11223344",
              "deadbeef"
            ]
          },
          "types": {
            "readOnly": true,
            "description": "For values, see `type` field of Device schema.\n\nType is automatically set by the Bond Bridge to be the set of types of the\nunderlying devices. Note that\nGroup types is always an array, even if it has zero or one element.\n\nWhen devies of multiple types are mixed in a single Group,\nthis `types` lists each type.\nFor example, a Ceiling Fan (CF) and a Light (LT) combined would be\n[\"CF\", \"LT\"] (with the order being aribitrary).\n",
            "example": [
              "MS"
            ],
            "type": "array"
          },
          "locations": {
            "readOnly": true,
            "example": [
              "Kitchen"
            ],
            "type": "array",
            "description": "Similar to `types`, if all Devices in the Group are in the same Location,\nthis field will be an array with a single string. However, when Devices\nfrom multiple Locations are combined in one Group, this field lists\neach unique Location in arbitrary order.\n"
          },
          "actions": {
            "readOnly": true,
            "type": "array",
            "example": [
              "Open",
              "Close",
              "Preset"
            ],
            "description": "The list of available Actions on the Group.\nThis is the intersection of Actions for the Devices in the Group.\nIn other words, the Group Actions are those Actions which are common\nto all Devices in the Group.\n"
          },
          "state": {
            "readOnly": true,
            "type": "object",
            "example": {
              "_": "ad9bcde4"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "schemas_State": {
        "example": {
          "open": 1
        }
      },
      "SceneList": {
        "type": "object",
        "example": {
          "_": "7fc1e84b",
          "3b20f300": {
            "_": "9a5e1136"
          },
          "4caf6472": {
            "_": "409d124b"
          }
        }
      },
      "Scene": {
        "properties": {
          "name": {
            "example": "Privacy",
            "type": "string"
          },
          "actors": {
            "description": "Array of actions to be executed when the Scene is run.\n\nThis field must contain at least one action during Scene creation.\nIt may be updated using PATCH.\n",
            "type": "array",
            "example": [
              {
                "device": "aabbccdd",
                "action": "TurnOn"
              },
              {
                "group": "11223344",
                "action": "SetBrightness",
                "argument": 50
              }
            ]
          },
          "types": {
            "readOnly": true,
            "description": "For values, see `type` field of Device schema.\n\nAutomatically set by the Bond Bridge to be the set of types of the\nunderlying devices. Note that Scene types is always an array, even if it has zero or one element.\nIn the event that a Scene contains Groups, the types of the underlying devices\nare used to determine the Scene types array.\n\nWhen devies of multiple types are mixed in a single Scene,\nthis `types` lists each type.\nFor example, a Ceiling Fan (CF) and a Light (LT) combined would be\n[\"CF\", \"LT\"] (with the order being aribitrary).\n",
            "example": [
              "MS"
            ],
            "type": "array"
          },
          "locations": {
            "readOnly": true,
            "example": [
              "Kitchen"
            ],
            "type": "array",
            "description": "Similar to `types`, if all Devices in the Scene are in the same Location,\nthis field will be an array with a single string. However, when Devices\nfrom multiple Locations are combined in one Scene, this field lists\neach unique Location in arbitrary order.\n"
          }
        },
        "required": [
          "name"
        ]
      },
      "SidekickList": {
        "type": "object",
        "example": {
          "_": "7fc1e84b",
          "3b20f300": {
            "_": "9a5e1136"
          },
          "4ad874d2": {
            "_": "84819a9f"
          },
          "a94328bc": {
            "_": "23141efa"
          },
          "d87d6ef2": {
            "_": "2425a8bc"
          }
        }
      },
      "Sidekick": {
        "type": "object",
        "properties": {
          "_id": {
            "writeOnly": true,
            "example": "SNAXX12345",
            "type": "string",
            "description": "Provided only on POST request to specify the Sidekick ID.\n"
          },
          "name": {
            "example": "My Sidekick",
            "type": "string",
            "description": "Name of Sidekick on Bond Home app and suggested name for \ncontrol system integrations.\n"
          },
          "location": {
            "example": "My Room",
            "type": "string",
            "description": "Location of Sidekick.\n"
          },
          "keys": {
            "readOnly": true,
            "example": 3,
            "type": "integer",
            "description": "Number of keys available on this Sidekick.\nMay change after creation due to user changing mode.\n"
          },
          "chans": {
            "readOnly": true,
            "example": 5,
            "type": "integer",
            "description": "Number of channels available on this Sidekick.\nMay change after creation due to user changing mode.\n"
          },
          "chan_links": {
            "example": {
              "1": [
                {
                  "device": "aabbccdd",
                  "direct": 1
                },
                {
                  "device": "11223344",
                  "direct": 0
                }
              ],
              "2": [],
              "3": [],
              "4": [],
              "5": []
            },
            "type": "object",
            "description": "Object describes every link between channels of this Sidekick and the\ndevices which they control. (In future will permit specifying `group`\ninstead of `device`.)\n\nEach channel number maps to an array, each element of which is called\na \"channel link\". Each link has two fields:\n\n  - `device`: device id channel is linked to\n  - `direct`: \n    - 0 = channel configured for relay\n    - 1 = channel configured for correct direct technology\n    - -1 = channel configured for incorrect direct technology, Bridge will relay signal.\n\nNote that there are valid circumstances where `direct` field is -1.\nFor example, a channel may be linked to an RTS motor and an ARC motor.\nThe user can only pick a single direct technology, for example RTS.\nThe ARC motor will then be in the -1 case.\n"
          },
          "key_links": {
            "example": {
              "1": [],
              "2": [
                {
                  "event": "DOUBLE_TAP",
                  "device": "aabbccdd",
                  "action": "SetPosition",
                  "argument": 75
                }
              ],
              "3": []
            },
            "type": "object",
            "description": "Object describes every link between key events from this Sidekick and the\ndevice, group, and scene actions which they trigger. \n(In future will permit specifying `group` or `scene` instead of `device`.)\n\nEach key number maps to an array, each element of which is called\na \"key link\". Each key link has three or four fields:\n\n  - `event`: which key event to trigger on\n    - `TAP`\n    - `DOUBLE_TAP`\n    - `HOLD_START`\n    - `HOLD`\n    - `HOLD_END`\n  - `device`: which device will act in response to trigger\n  - `action`: action to call on device\n  - `argument`: (optional) argument to above action, such as position percentage\n"
          },
          "signal": {
            "readOnly": true,
            "example": 97,
            "type": "integer",
            "description": "Signal quality indication, range 1-100.\nNote that, to avoid hash thrashing, \nchanges in this signal indication do not cause\nan update to the endpoint hashes. Clients wishing to check\nsignal strength must explicitly query this endpoint.\n"
          },
          "battery": {
            "readOnly": true,
            "example": 80,
            "type": "integer",
            "description": "Sidekick battery remaining, range 1-100.\nValues may be limited to:\n  - 90: battery OK (Green)\n  - 30: low battery (Yellow) (replace witin ~1 year from when first indicated low)\n  - 10: battery critical (Red) (may fail at any time, or may already be failing)\n"
          },
          "model": {
            "readOnly": true,
            "example": "SKN-386",
            "type": "string",
            "description": "User-facing model number of Sidekick.\n"
          }
        }
      },
      "Keystream": {
        "type": "object",
        "properties": {
          "seq": {
            "example": 3210,
            "type": "integer",
            "description": "Sequence number which increments each time this Sidekick transmits\na BondSync signal. Usually not needed by integrations.\n"
          },
          "event": {
            "example": "TAP",
            "type": "string",
            "description": "Event which occured on the specified key. Possibilities are:\n  - TAP\n  - DOUBLE_TAP\n  - HOLD_START\n  - HOLD\n  - HOLD_END\n"
          },
          "key": {
            "example": 3,
            "type": "integer",
            "description": "1-based key number.\n"
          },
          "hold_ms": {
            "example": 1760,
            "type": "integer",
            "description": "Length of time for which key has been held, in milliseconds.\nOnly provided for HOLD and HOLD_END events.\n"
          }
        }
      },
      "Learn": {
        "type": "object",
        "properties": {
          "learn_window_ms": {
            "example": 60000,
            "type": "integer",
            "readOnly": true,
            "description": "Duration of learn window (milliseconds).\n"
          },
          "learn_window_remaining_ms": {
            "example": 1100,
            "type": "integer",
            "readOnly": true,
            "description": "Milliseconds remaining before learn window closes.\n"
          },
          "learn_window_open": {
            "example": true,
            "type": "boolean",
            "description": "Whether new Sidekick can be learned.\nTrue iff learn_window_remaining_ms is nonzero.\n"
          },
          "learn_count": {
            "example": 0,
            "type": "integer",
            "readOnly": true,
            "description": "Number of times a new Sidekick has been learned on this boot.\nUseful in UI design to know that the learn process completed,\neven if the learned address is the same.\n"
          }
        }
      },
      "Rssi": {
        "example": {
          "format": [
            "freq",
            "rssi"
          ],
          "results": [
            [
              350000,
              80
            ],
            [
              351000,
              87
            ],
            [
              352000,
              92
            ]
          ]
        },
        "type": "object"
      },
      "Scan": {
        "type": "object",
        "properties": {
          "freq": {
            "example": 434000,
            "type": "number",
            "description": "Frequency to scan in kHz.\n\nIf not provided, scan will search all RF frequencies, but not IR.\n\nSpecify `38` to explicitly scan IR.\n"
          },
          "modulation": {
            "example": "OOK",
            "type": "string",
            "description": "- `OOK` = on-off keying\n- `GFSK` = gaussian frequency-shift keying\n\nIf not provided, defaults to `OOK`.\n\nOnly applicable to RF.\n\n(GFSK scanning currently unimplemented.)\n"
          },
          "running": {
            "example": false,
            "readOnly": true,
            "description": "If true, scan is running.\n"
          },
          "total_timeout": {
            "example": 30,
            "type": "number",
            "readOnly": true,
            "description": "The time from scan start to scan timeout, in\nseconds.\n"
          },
          "success": {
            "example": true,
            "readOnly": true,
            "description": "If true, a signal was found.\n"
          }
        }
      },
      "TokenGet": {
        "properties": {
          "locked": {
            "example": 0,
            "type": "integer",
            "description": "If 1, means that client must provide pin to unlock.\n\nAlternatively, the Bond user may perform an out-of-band proof-of-ownership event\non the physical Bond unit to cause this field to become 0.\n"
          },
          "token": {
            "example": "8f514567acaf9869",
            "type": "string",
            "description": "Token for controlling this Bond over local network.\n\nRequired to be provided as an HTTP header for all local communications.\n\nThis is a hex representation of a random uint64,\nwhich is regenerated on Bond factory reset.\n\nOnly provided if locked is 0.\n"
          },
          "account_code": {
            "example": "1234567890",
            "type": "string",
            "description": "Account code previously set by PATCH.\n\nOnly provided if locked is 0.\n"
          },
          "nonce": {
            "example": "876a2b14c55b3e5a",
            "type": "string",
            "description": "Random 64-bit hex string generated whenever client sets account_code,\neven if accound_code is unmodified.\n"
          },
          "pin_attempts_left": {
            "example": 9,
            "type": "integer",
            "description": "Number of times which the PIN may be guessed.\n\nOnce `pin_attempts_left` reaches 0, user must either use an\nout-of-band proof-of-ownership event, or reboot/power-cycle the Bond.\n"
          },
          "disable": {
            "example": false,
            "type": "boolean",
            "description": "If disabled, HTTP and other local APIs will not require token to function.\nOnly disable on trusted networks, and only when using fixed IP addresses\nto avoid controlling the wrong Bond. Defaults to false, i.e., token required by default.\nAvailable as of firmware v2.10.2.\n"
          }
        }
      },
      "TokenPatch": {
        "properties": {
          "locked": {
            "example": 0,
            "type": "integer",
            "description": "If 1, means that the client wants to immediately re-lock this endpoint.\n\nIf 0, means that the client wants to unlock the endpoint.\n"
          },
          "account_code": {
            "example": "1234567890",
            "type": "string",
            "description": "10-digit account code, used to specify which account to associate the Bond with.\n\n(Absolute maximum for this field is 16 alpha-numeric characters)\n\nThis does NOT include any checksum digits which may be added when displayed\nfor the customer in the app, and required by the Bond WebGUI to eliminate typo issues.\n"
          },
          "pin": {
            "example": "1234",
            "type": "string",
            "description": "Pin number, if required, as part of unlocking procedure.\n"
          },
          "disable": {
            "example": false,
            "type": "boolean",
            "description": "If disabled, HTTP and other local APIs will not require token to function.\nOnly disable on trusted networks, and only when using fixed IP addresses\nto avoid controlling the wrong Bond. Defaults to false, i.e., token required by default.\n"
          }
        }
      },
      "mqtt_Schema": {
        "properties": {
          "host": {
            "example": "my-mqtt-server.myhome.com",
            "type": "string",
            "description": "IP address or domain name of the MQTT broker.\nIf set to empty string, the default Bond Cloud server will be used.\n"
          },
          "port": {
            "example": 8883,
            "type": "number",
            "description": "Specify a different port number for the MQTT broker.\nIf set to 0, the Bond Cloud default port number will be used (8883).\nNote that the communication is secured by TLS (SSL).\n"
          },
          "cert_set": {
            "example": true,
            "type": "boolean",
            "readOnly": true,
            "description": "If true, a custom Bond certificate has been loaded.\nIf false, the Bond's default certificate will be used.\n"
          },
          "cert": {
            "example": "certificate_goes_here",
            "type": "string",
            "writeOnly": true,
            "description": "Specify a custom Bond certificate.\nTypically, this is the Bond-specific certificate\nconcatenated with the Bond-signing CA certificate.\nWrite to empty string to go back to the Bond's default certificate.\n"
          },
          "key_set": {
            "example": true,
            "type": "boolean",
            "readOnly": true,
            "description": "If true, a custom Bond private key has been loaded.\nIf false, the Bond's default private key will be used.\n"
          },
          "key": {
            "example": "key_goes_here",
            "type": "string",
            "writeOnly": true,
            "description": "Specify a custom Bond private key.\nWrite to empty string to go back to the Bond's default private key.\n"
          },
          "server_cert_set": {
            "example": true,
            "type": "boolean",
            "readOnly": true,
            "description": "If true, a custom server CA has been loaded.\nIf false, the Bond Cloud CA will be used.\n"
          },
          "enabled": {
            "example": true,
            "type": "boolean",
            "description": "[Added in v3.3.3]\nIf true (default), Bond will attempt MQTT connection. If MQTT connection fails, Bond becomes discoverable again via Config AP.\nIf false, Bond will not attempt MQTT connection and Config AP will remain deactivated.\n"
          },
          "server_cert": {
            "example": "certificate_goes_here",
            "type": "string",
            "writeOnly": true,
            "description": "Specify a custom MQTT server CA.\nSet to empty string to return to default.\n"
          },
          "server_cert_check": {
            "example": true,
            "type": "boolean",
            "description": "Set to false to disable verification of the MQTT server CA.\nIt is strongly recommend to leave this option enabled,\nbecause otherwise a man-in-the-middle attack is possible.\n"
          }
        }
      },
      "bpup_Schema": {
        "properties": {
          "broadcast": {
            "example": true,
            "type": "boolean",
            "description": "If true, the Bond will broadcast all state updates on port 30007\n(disabled by default)\n"
          }
        }
      },
      "bhk_Schema": {
        "properties": {
          "enabled": {
            "example": false,
            "type": "boolean",
            "description": "- `false`: HomeKit logic and operations will not be executed. All settings remains in device database. (default)\n- `true`: HomeKit logic and operations will run.\n"
          },
          "paired": {
            "example": false,
            "type": "boolean",
            "readOnly": true,
            "description": "When enabled is false, paired will always be false.\nWhen enabled is true, paired means:\n  - `false`: Bond is not paired to an account and is discoverable by the HomeKit Protocol. (default)\n  - `true`: Bond is paired and is not discoverable.\n"
          },
          "setup_code": {
            "example": "12341234",
            "type": "string",
            "readOnly": true,
            "description": "The HomeKit Setup Code is your Bond PIN two times.\nFor example, if your Bond PIN is \"1234\", your HomeKit Setup Code is \"12341234\".\n"
          }
        }
      },
      "schemas_Scan": {
        "example": {
          "hidden_requires_bssid": true,
          "format": [
            "ssid",
            "bssid",
            "auth",
            "ch",
            "signal"
          ],
          "results": [
            [
              "REIyQzk1",
              "00A423DB2C9D",
              4,
              1,
              90
            ],
            [
              "b2xpYnJhIGFpcnBvcnQgMQ==",
              "4C3275C649C4",
              3,
              11,
              74
            ],
            [
              "UGxheVNpZ2h0XzVH",
              "003E5D921274",
              4,
              6,
              73
            ],
            [
              "b2xpYnJhIG1pZmkgMw==",
              "101331C514C7",
              3,
              6,
              61
            ],
            [
              "S0VFQk9YIFcxNTBOUg==",
              "D8EB97B1B322",
              0,
              11,
              60
            ],
            [
              "VmVyaXpvbi1NQkhBMTAtMTRDNy1ndWVzdA==",
              "121331C514C8",
              3,
              6,
              60
            ],
            [
              "b2xpYnJhIGFpcnBvcnQgMQ==",
              "9801A7E7ABD4",
              3,
              6,
              57
            ],
            [
              "b3B0aW11bXdpZmlfUGFzc3BvaW50",
              "E00EDA137575",
              5,
              1,
              39
            ],
            [
              "NkMxNDYw",
              "0072826C1468",
              4,
              1,
              36
            ],
            [
              "UkRMRiBXaS1GaSBOZXR3b3Jr",
              "881FA13633AA",
              3,
              1,
              33
            ],
            [
              "SFAtUHJpbnQtRjEtT2ZmaWNlamV0IFBybyA4NjAw",
              "28924ABF85F1",
              3,
              6,
              30
            ],
            [
              "Wm9oYXIgYWlycG9ydA==",
              "00F76FCDE89C",
              3,
              11,
              28
            ],
            [
              "aWM=",
              "149182C06087",
              3,
              1,
              26
            ],
            [
              "bWVkaWFsaW5r",
              "14358B0B1920",
              2,
              1,
              24
            ]
          ]
        }
      },
      "Sta": {
        "properties": {
          "status": {
            "example": 2,
            "type": "number",
            "description": "Indication of whether the Wi-Fi settings have been successful:\n  - -4 = Wi-Fi not configured\n  - -3 = disabled because Ethernet is selected\n  - -2 = authentication failure\n  - -1 = network not found\n  - 0 = attempting to connect\n  - 1 = connected, but no IP address yet\n  - 2 = connected with IP address assigned\n  - 3 = connected to cloud (MQTT)\n"
          },
          "ssid": {
            "example": "bGlua3N5cw==",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not set."
          },
          "bssid": {
            "example": "001122334455",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not set."
          },
          "bssid_set": {
            "readOnly": true,
            "example": true,
            "type": "boolean"
          },
          "mac": {
            "example": "30aea48fa8e8",
            "type": "string",
            "readOnly": true
          },
          "static_ip_set": {
            "example": false,
            "type": "boolean",
            "description": "[changed in v2.16.2]\nIf true on write, the ip, gw, netmask fields are required.\nIf false on write, the ip, gw, netmask fields will be ignored\n and DHCP configured.\n"
          },
          "ip": {
            "example": "192.168.1.42",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not connected."
          },
          "gw": {
            "example": "192.168.1.1",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not connected."
          },
          "netmask": {
            "example": "255.255.255.0",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not connected."
          },
          "dns_set": {
            "example": true,
            "type": "boolean",
            "description": "[changed in v2.16.2]\nIf true on write, the dns and dns_alt fields are required.\nIf false on write, the dns and dns_alt fields will be ignored\n  and the default dns behavior will take effect.\n"
          },
          "dns": {
            "example": "8.8.8.8",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not connected."
          },
          "dns_alt": {
            "example": "8.8.4.4",
            "type": "string",
            "nullable": true,
            "description": "Can be `null` if it's not connected."
          },
          "password": {
            "example": "cGFzc3dvcmQ=",
            "format": "password",
            "type": "string",
            "nullable": true,
            "writeOnly": true,
            "description": "Can be `null` if it's not set."
          }
        }
      },
      "Watchdog": {
        "properties": {
          "rwdg_disable": {
            "example": false,
            "type": "boolean",
            "description": "- `true`: disable Bond Cloud watchdog\n- `false`: enable Bond Cloud watchdog (default)\n\nIf enabled, Bond will reboot if not connected to Bond Cloud\nwithin first 10 minutes of boot, or if disconnected for 3 minutes.\n\nWatchdog does not run if Bond is in Wi-Fi Setup mode.\n\nNOTE: Any communication with the Bond over the HTTP transport\nwill reset the timer as if the Bond were connected to the cloud.\n"
          },
          "rwdg_timer_ms": {
            "example": 60000,
            "type": "number",
            "readOnly": true,
            "description": "Number of milliseconds left on watchdog timer before Bond will reboot\nby itself to attempt to reconnect to the Bond cloud.\nNOTE: If `rwdg_disable` is true, then Bond will not actually reboot,\nbut timer will continue to tick down.\n"
          }
        }
      },
      "Eth": {
        "properties": {
          "status": {
            "example": 2,
            "type": "number",
            "description": "- 0 = no link\n- 1 = link, but no IP address yet\n- 2 = link and IP address assigned\n- 3 = connected to cloud (MQTT)\n"
          },
          "mac": {
            "example": "30aea48fa8e8",
            "type": "string",
            "readOnly": true
          },
          "static_ip_set": {
            "example": false,
            "type": "boolean",
            "description": "[changed in v2.16.2]\nIf true on write, the ip, gw, netmask fields are required.\nIf false on write, the ip, gw, netmask fields will be ignored\n and DHCP configured.\n"
          },
          "ip": {
            "example": "192.168.1.42",
            "type": "string"
          },
          "gw": {
            "example": "192.168.1.1",
            "type": "string"
          },
          "netmask": {
            "example": "255.255.255.0",
            "type": "string"
          },
          "dns_set": {
            "example": true,
            "type": "boolean",
            "description": "[changed in v2.16.2]\nIf true on write, the dns and dns_alt fields are required.\nIf false on write, the dns and dns_alt fields will be ignored\n  and the default dns behavior will take effect.\n"
          },
          "dns": {
            "example": "8.8.8.8",
            "type": "string"
          },
          "dns_alt": {
            "example": "8.8.4.4",
            "type": "string"
          }
        }
      },
      "Progress": {
        "properties": {
          "progress": {
            "example": -1,
            "type": "number",
            "description": "Integer describing status of a firmware upgrade.\n\n  - 1-999 = upgrade progress in 10ths of a percent\n  - 1000 = upgrade complete, but explicit reboot required\n  - -1 = error\n"
          },
          "error_msg": {
            "example": "net_connect",
            "type": "string",
            "description": "Only present when progress is less than zero.\n\nThis string MAY be displayed to the user,\nand it SHOULD be logged for diagnostic purposes.\n"
          }
        }
      },
      "Upgrade": {
        "properties": {
          "host": {
            "example": "s3.amazonaws.com",
            "type": "string",
            "description": "Fully-Qualified Domain Name or IP address of server from which to download upgrade\n"
          },
          "port": {
            "example": "443",
            "type": "string",
            "description": "HTTPS port number of server.\nUsed only if `sys/version` is missing key `upgrade_http`,\n  or the key is false.\n"
          },
          "http_port": {
            "example": "80",
            "type": "string",
            "description": "HTTP port number of server.\nUsed only if `sys/version` contains true value for `upgrade_http`.\n"
          },
          "path": {
            "example": "/bond-updates/breck-mach1-v2.0.bin",
            "type": "string",
            "description": "Path of HTTPS URL to use to fetch the firmware binary.\nMust not include any query or fragment.\nMust start with a forward slash.\n\nNote that only HTTPS is supported.\nOther protocols (including unsecured HTTP) are not supported.\n"
          },
          "info": {
            "example": "cc8d372f1b1ada5b99097e46f9d45107487e5f8b000d5ccd943100b3dc27fb55:bond-simulator:v2.0",
            "type": "string",
            "description": "Firmware info string, consisting of\nSHA-256 hash of the firmware binary,\nfirmware target,\nand new firmware version number.\n\nThe hash is checked after firmware is downloaded and before\nit is written to flash, to ensure integrity and security.\n"
          },
          "sig": {
            "example": "PAGliMxpwYYkuG+48JDu6rYfF9V57xXGNy2xf8yXCoo2Gcdk8plHrez2bPWkL8TZ5ptaZBPE9UuQf8wx9nkQswBoX413GHnQhBmyX0n/DihqQCG5rR7o3dZWhDsvke20JSB18D8xjNGHaIsWITyL38UAxvkw6gx5iv1ZXZ1KvafYoXbpk0mqfPJ7e/gV3SOBYXppHkm+3nQWGyxrn+oRg7LT82/JrKc//jkg18GfB0nS0cGfa9b6XFUELjAvY3Yi2cymbErcNZfu5jmsQxIOrGvDjy5foSTO1dK5uK9x+3frbIx6dYHQ3vriHMXPO2q+G1Hszu+dqI+aFS3rEdt8DbXoQ1qn/4eKhVhfJSMox9su7o6mvxA2LPFGbXXY6aauBA+4rMObid1JQ879NR41TckN7tZz/JCPFRCe4pqx+rCdPGnY78brllrFcb9J6bZxpKuo7GZ/der5zPZAev+EMOLVtSVqGzNA8VG+tghtxWWueVHG2R3XacLsF2gzWPjONsdwYmCnAihLGNkaPhrUwRSHUs8/LBzJPYtTjH13fv6ELpylztcMPwM7KoFJRyiuhFW3m2JinIIwqT9N2jwlGN3f3Fn/CJ3jA8fLhyQ3Vu37kowLZrI+8KVAdfxEyrEDHD/HIC2CMnoB6MSkuSTVO3AAAVKjUUurFGPb8NAiIk0=",
            "type": "string",
            "description": "Digital signature of `info` string, signed using Olibra's private key,\nand base-64 encoded. Note that, as a security precaution,\ndifferent key-pair is used for each firmware target.\nThe API client does not need to worry about the key-pairs,\nbut only be capable of providing the appropriate `info` and `sig`\nfields that correspond to a particular firmware binary.\nThis metadata is available in release notes from Olibra.\n\nThe Bond validates this signature before the firmware update is completed.\n"
          },
          "reboot": {
            "example": 1,
            "type": "number",
            "description": "If non-zero, requests that the Bond reboot spontaneously upon\nsuccessful completion of the upgrade installation.\n\nIf zero, the Bond will wait for an explicit reboot via sys/reboot.\n\nDefaults to zero.\n"
          }
        },
        "required": [
          "host",
          "port",
          "path",
          "info",
          "sig"
        ]
      },
      "Version": {
        "properties": {
          "upgrade_http": {
            "example": true,
            "type": "boolean",
            "description": "If true, Bond will use HTTP protocol using `http_port` specified\n  in sys/upgrade endpoint.\n\nIf false or absent, Bond will use HTTPS protocol using `port`\n  specified in sys/upgrade endpoint.\n"
          },
          "bondid": {
            "example": "KSMJWCE12345",
            "type": "string",
            "description": "Bond ID (serial number). Unique within the Bond platform."
          },
          "target": {
            "example": "zermatt",
            "type": "string",
            "description": "The target identifies the configuration of bond-core firmware\nrunning on the device. Target is often, though not always,\nin a one-to-one relationship with product models.\nThe target, together with the firmware version,\nuniquely identify the exact image on the device.\n"
          },
          "api": {
            "example": 2,
            "type": "integer",
            "description": "API version increments only when a change occurs in the firmware API\n  which requires a new version of the Bond App. Incrementing this\n  field will cause older apps to strongly encourage user to upgrade\n  the app on the next interaction with the product.\n"
          },
          "fw_ver": {
            "example": "v2.9",
            "type": "string",
            "description": "Firmware version.\n\nExamples of release versions:\n\n  - `v2.2`\n  - `v2.2.1`\n  - `v2.3-alpha`\n  - `v2.3-beta`\n\nUnreleased versions have a more complex general form. Example:\n\n`v1.204.2-57-g9c88a66-dirty-smith-great-new-feature`\n\nWhere `v1.204.2` is the previous release,\nthere have been 57 commits since that release,\nthe last commit short-hash is `9c88a66`,\nthe working directory was dirty when the image was built,\nit was on a branch owned by developer `smith`,\nand the rest of the branch name was `great-new-feature`.\n\nThe version number will always match the regex\n`v[\\d]+.[\\d]+(.[\\d]+)?(-[0-9A-Za-z\\-]+)?`.\n\nNote that any user other than the developer should\nreject a firmware with the `dirty` tag.\n"
          },
          "fw_date": {
            "example": "Wed Nov 22 15:45:19 UTC 2020",
            "type": "string",
            "description": "Human-readable string describing the firmware build date.\n\nFor display only. Do not use for programmatic purposes.\nMust not be relied upon to always be in the same format.\n"
          },
          "mcu_ver": {
            "example": "v1.234",
            "type": "string",
            "description": "Describes firmware on secondary processor (MCU) of Bond hardware\nwith serial numbers starting with A, B, or C. Later models do\nnot have this field.\n"
          },
          "make": {
            "example": "Olibra LLC",
            "type": "string",
            "description": "brand or manufacturer."
          },
          "branding_profile": {
            "example": "BondHome",
            "type": "string",
            "description": "Symbol used for looking up a customized branded experience.\nThis is not nessisarily an appropriate representation of the product's\nbrand name, because this is not nessisarly known at manufacturing time.\n"
          },
          "model": {
            "example": "BD-1000",
            "type": "string",
            "description": "Device model number. Displayed to user in advanced settings.\n\nUsed, along with `brand`, to customize the setup instructions\nfor the device.\n"
          }
        }
      },
      "Reset": {
        "properties": {
          "type": {
            "example": "factory",
            "type": "string",
            "description": "- `\"factory\"`: factory reset (aka \"White Reset\")\n- `\"setup\"`: setup reset (aka \"Wi-Fi Reset\" or \"Green reset\")\n"
          }
        }
      },
      "Time": {
        "type": "object",
        "properties": {
          "unix_time": {
            "example": 1581708795,
            "type": "number",
            "description": "Absolute time, in seconds since the UNIX epoch.\n\nStarts at zero at first boot for most products (with no backup battery).\nAutomatically set via NTP (unless NTP has been disabled or\nthe NTP server is unreachable), at which time `time_set` is set.\n"
          },
          "time_set": {
            "example": true,
            "type": "boolean",
            "description": "If false, then time has not (yet) been set or determined via NTP.\n\nDevice Schedules do not run unless `time_set` is true.\n"
          },
          "tz": {
            "example": "America/Sao_Paolo",
            "type": "string",
            "nullable": true,
            "description": "Timezone string, as per tz_database.\n\n`null` if unset.\n\nThe current list of supported timezones is given at\nhttps://bond-updates.s3.amazonaws.com/tz_meta.json\n"
          },
          "grid": {
            "example": "FN30aw",
            "type": "string",
            "nullable": true,
            "description": "Approximate geolocation of Bond unit,\nexpressed as a 6-character Maidenhead Grid Locator.\nThis information is used to calculate the sunrise and sunset\ntimes for Device Schedules.\n\nRegex: `([A-R]{2}[0-9]{2}[a-r]{2})?`\n\n`null` if unset.\n\nSee: https://en.wikipedia.org/wiki/Maidenhead_Locator_System\n"
          }
        }
      },
      "Power": {
        "type": "object",
        "properties": {
          "poe_active": {
            "example": true,
            "type": "boolean",
            "description": "True if the unit is being supplied PoE.\n"
          },
          "usb_active": {
            "example": false,
            "type": "boolean",
            "description": "True if the unit is being supplied USB.\n\nNOTE: multiple supplies may be simultaneously active.\n"
          }
        }
      },
      "Backup": {
        "properties": {
          "host": {
            "example": "192.168.1.107",
            "type": "string",
            "description": "IP address of local HTTP server that will accept or serve snapshot.\n"
          },
          "http_port": {
            "example": "80",
            "type": "string",
            "description": "HTTP port number of server.\nUsually not 80 because mobile phone or other OS will generate a\nrandom unused high port for the application.\n"
          },
          "path": {
            "example": "/snapshots",
            "type": "string",
            "description": "Path to directory on HTTP server to use.\nMust not include any query or fragment.\nMust start (but not end) with a forward slash.\nMust not include the filename.\n"
          },
          "timestamp": {
            "example": "1618599782",
            "type": "string",
            "description": "Required only for backup operation.\nTimestamp for inclusion in the filename.\n"
          },
          "filename": {
            "example": "/ZZDE12345_v2.18.4-alpha_1618599782_0f8d01fa.bsnap",
            "type": "string",
            "description": "Required only for restore operation.\nFirmware generates the filename for backups.\n\nFormat:\n\n  `/<bond-id>_<fw-ver>_<timestamp>_<random>.bsnap`\n\nTimestamp is as provided by client.\n"
          },
          "dev_ids": {
            "example": [
              "aabbccdd"
            ],
            "type": "string",
            "description": "If not provided, all devices are included in backup.\n\nIf provided, this list of device IDs are backed up.\n\nBackup includes devices with their names, locations,\nschedules, commands & signals, properties, and state.\n"
          },
          "backup": {
            "example": 0,
            "type": "number",
            "readOnly": true,
            "description": "- `0`: no backup running\n- `1`: backup still running\n- `2`: backup successful\n- `-1`: backup failure\n"
          },
          "restore": {
            "example": -1,
            "type": "number",
            "readOnly": true,
            "description": "- `0`: no restore running\n- `1`: restore still running\n- `2`: restore successful\n- `-1`: restore failure\n\nNote: only one of `backup` and `restore` can be non-zero at once.\n"
          },
          "progress": {
            "example": 999,
            "type": "number",
            "readOnly": true,
            "description": "Number from 0-1000 representing progress of `backup` or `restore`.\nProgress == 1000 iff backup == 2 or restore == 2.\n"
          },
          "error_msg": {
            "example": "connection error",
            "type": "string",
            "readOnly": true,
            "description": "Human-readable description of why `backup` or `restore` is `-1`.\nAbsent otherwise.\n"
          }
        }
      },
      "WeatherSensor": {
        "type": "object",
        "properties": {
          "_id": {
            "writeOnly": true,
            "example": "WEAXX12345",
            "type": "string",
            "description": "Provided only on POST request to specify the Weather Sensor ID.\n"
          },
          "name": {
            "example": "My Weather Sensor",
            "type": "string",
            "description": "Name of Weather Sensor on Bond Home app and suggested name for \ncontrol system integrations.\n"
          },
          "location": {
            "example": "My garden",
            "type": "string",
            "description": "Location of Weather Sensor.\n"
          },
          "event_links": {
            "example": {
              "1": [
                {
                  "device:": "xxyyzzww",
                  "action": "TurnOn"
                }
              ],
              "2": [
                {
                  "device": "aabbccdd",
                  "action": "SetPosition",
                  "argument": 75
                }
              ],
              "3": []
            },
            "type": "object",
            "description": "Object describes every link between weather events from this Weather Sensor and the\ndevice, group, and scene actions which they trigger.\n(In future will permit specifying `group` or `scene` instead of `device`.)\n\nEach weather event maps to an event number:\n  - `1` = Wind event: triggered when wind speed reaches configured level\n  - `2` = Rain event: triggered when starts to rain\n  - `3` = Sun event:  triggered when sun intensity reaches configured level\n\nEach event number maps to an array, each element of which is called\na \"event link\". Each event link has two or three fields:\n  - `device`: which device will act in response to the weather event\n  - `action`: action to call on device\n  - `argument`: (optional) argument to above action, such as position percentage\n"
          },
          "signal": {
            "readOnly": true,
            "example": 97,
            "type": "integer",
            "description": "Signal quality indication, range 1-100.\nNote that, to avoid hash thrashing, \nchanges in this signal indication do not cause\nan update to the endpoint hashes. Clients wishing to check\nsignal strength must explicitly query this endpoint.\n"
          },
          "battery": {
            "readOnly": true,
            "example": 80,
            "type": "integer",
            "description": "Weather Sensor battery remaining in percentage, range 1-100.\n"
          },
          "model": {
            "readOnly": true,
            "example": "BWS-1000",
            "type": "string",
            "description": "User-facing model number of Weather Sensor.\n"
          },
          "type": {
            "readOnly": true,
            "example": "weather_sensor",
            "type": "string",
            "description": "Indicates the type of Sidekick, always return `weather_sensor`.\n"
          }
        }
      },
      "schemas_Properties": {
        "type": "object",
        "properties": {
          "feature_wind": {
            "example": true,
            "type": "boolean",
            "description": "Enable or disable the wind detection functionality.\n"
          },
          "feature_rain": {
            "example": true,
            "type": "boolean",
            "description": "Enable or disable the rain detection functionality.\n"
          },
          "feature_sun": {
            "example": true,
            "type": "boolean",
            "description": "Enable or disable the sunlight intensity detection functionality.\n"
          },
          "feature_wind_push": {
            "example": true,
            "type": "boolean",
            "description": "Enable or disable the push notification for when the wind speed approaches the configured threshold.\n"
          },
          "wind_threshold_dms": {
            "example": 85,
            "type": "integer",
            "description": "Wind detection threshold in decimeters/second. \n"
          },
          "sun_threshold_level": {
            "example": 5,
            "type": "integer",
            "description": "Sun level threshold. From 1 (lowest intensity) to 8 (highest intensity).\n"
          },
          "wind_ignore": {
            "example": true,
            "type": "boolean",
            "description": "Ignore wind detections for a specified amount of time. \nWhen setting to true, requires setting `wind_ignore_expiration`.\n"
          },
          "wind_ignore_expiration": {
            "example": 3600,
            "type": "integer",
            "description": "Number of seconds for ignoring wind detections.\n"
          }
        }
      },
      "schemas_State-2": {
        "type": "object",
        "properties": {
          "status": {
            "example": "triggered_wind",
            "type": "string",
            "readOnly": true,
            "description": "String indicating the current status of the Weather Sensor. \nPossible values are:\n- `idle`\n- `triggered_wind`\n- `triggered_rain`\n- `triggered_sun_high`\n- `triggered_wind_manual`\n"
          },
          "data_wind_speed_dms": {
            "example": 32,
            "type": "integer",
            "readOnly": true,
            "description": "Last measurement of wind speed in decimeters/second.\n"
          },
          "data_rain_mmh": {
            "example": 2,
            "type": "integer",
            "readOnly": true,
            "description": "Last measurement of rain rate in milimeters/hour.\n"
          },
          "data_sun_level": {
            "example": 6,
            "type": "integer",
            "readOnly": true,
            "description": "Last measurement of sun level.\n"
          },
          "data_unixtime": {
            "example": 1696479511,
            "type": "integer",
            "readOnly": true,
            "description": "Unixtime of the last data measurements.\n"
          },
          "is_raining": {
            "example": false,
            "type": "boolean",
            "readOnly": true,
            "description": "Flag indicating if it is currently raining or not.\n"
          },
          "battery_voltage_dV": {
            "example": 24,
            "type": "integer",
            "readOnly": true,
            "description": "Current state of the Weather Sensor solar battery in decivolts.\n"
          },
          "battery_2_voltage_dV": {
            "example": 24,
            "type": "integer",
            "readOnly": true,
            "description": "Current state of the Weather Sensor backup battery (AA cells) in decivolts.\n"
          },
          "battery": {
            "example": 80,
            "type": "integer",
            "readOnly": true,
            "description": "Current state of the Weather Sensor solar battery in percentage, range 1-100.\n"
          },
          "battery_2": {
            "example": 80,
            "type": "integer",
            "readOnly": true,
            "description": "Current state of the Weather Sensor backup battery in percentage, range 1-100.\n"
          },
          "status_flag_unstable": {
            "type": "boolean",
            "example": false,
            "readOnly": true,
            "description": "Flag indicating if Weather Sensor data rate is lower than expected.\n"
          },
          "status_flag_no_data": {
            "type": "boolean",
            "example": false,
            "readOnly": true,
            "description": "Flag indicating if Weather Sensor data is missing for more than 30 minutes.\n"
          },
          "status_flag_battery_low": {
            "type": "boolean",
            "example": false,
            "readOnly": true,
            "description": "Flag indicating if solar battery is running low.\n"
          },
          "status_flag_battery_2_low": {
            "example": true,
            "type": "boolean",
            "readOnly": true,
            "description": "Flag indicating if backup battery (AA cells) is running low.\n"
          },
          "status_flag_low_temperature": {
            "example": true,
            "type": "boolean",
            "readOnly": true,
            "description": "Flag indicating if Weather Sensor temperature is low, recommending operation with external 12V supply.\n"
          },
          "data_temperature_dc": {
            "example": 212,
            "type": "integer",
            "readOnly": true,
            "description": "Last measurement of the temperature in deci-Celsius.\n"
          },
          "data_humidity_percent": {
            "example": 65,
            "type": "integer",
            "readOnly": true,
            "description": "Last measurement of the humidity in percentage (0 to 100).\n"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Unauthorized"
            }
          }
        },
        "description": "Unauthorized"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFound"
            }
          }
        },
        "description": "Not Found"
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerError"
            }
          }
        },
        "description": "Internal Server Error"
      },
      "Created": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Created"
            }
          }
        },
        "description": "Resource Created"
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequest"
            }
          }
        },
        "description": "Bad request"
      },
      "Conflict": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Conflict"
            }
          }
        },
        "description": "Conflict"
      },
      "Locked": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Locked"
            }
          }
        },
        "description": "Resource is Locked"
      }
    }
  }
}